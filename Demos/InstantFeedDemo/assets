function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ADCLogger = (function () {
  function ADCLogger(message_dispatcher) {
    _classCallCheck(this, ADCLogger);

    this.message_dispatcher = message_dispatcher;
  }

  ADCLogger.prototype.trace = function trace(message) {};

  ADCLogger.prototype.trace_public = function trace_public(message) {};

  ADCLogger.prototype.info = function info(message) {};

  ADCLogger.prototype.info_public = function info_public(message) {};

  ADCLogger.prototype.warning = function warning(message) {
    this.log(message, "Log.private.warning");
  };

  ADCLogger.prototype.warning_public = function warning_public(message) {
    this.log_public(message, "Log.public.warning");
  };

  ADCLogger.prototype.error = function error(message) {
    this.log(message, "Log.private.error");
  };

  ADCLogger.prototype.error_public = function error_public(message) {
    this.log_public(message, "Log.public.error");
  };

  ADCLogger.prototype.log = function log(message, type) {

    this.message_dispatcher.queue_outbound_message({
      "m_origin": 1,
      "m_type": type,
      "m_target": 0,
      "message": "ADCController : " + message
    });
  };

  ADCLogger.prototype.log_public = function log_public(message, type) {

    this.message_dispatcher.queue_outbound_message({
      "m_origin": 1,
      "m_type": type,
      "m_target": 0,
      "message": message
    });
  };

  return ADCLogger;
})();

var log_trace = function log_trace(message) {
  $.log.trace(message);
};

var log_trace_public = function log_trace_public(message) {
  $.log.trace_public(message);
};

var log_info = function log_info(message) {
  $.log.info(message);
};

var log_info_public = function log_info_public(message) {
  $.log.info_public(message);
};

var log_warning = function log_warning(message) {
  $.log.warning(message);
};

var log_warning_public = function log_warning_public(message) {
  $.log.warning_public(message);
};

var log_error = function log_error(message) {
  $.log.error(message);
};

var log_error_public = function log_error_public(message) {
  $.log.error_public(message);
};

var log = function log(message, type) {
  $.log.log(message, type);
};

var log_public = function log_public(message, type) {
  $.log.log_public(message, type);
};

var lookup = function lookup(dict, key) {

  if (typeof dict === "undefined") {
    return "undefined";
  }

  if (typeof key === "undefined") {
    return "undefined";
  }

  if (dict[key] === 0) {
    return 0;
  }

  return dict[key] || "undefined";
};

var lookup_string = function lookup_string(dict, key) {

  if (typeof dict === "undefined") {
    log_trace("dict is undefined in lookup_string");
    return "";
  }

  if (typeof key === "undefined") {
    log_trace("key is undefined in lookup_string");
    return "";
  }

  var maybe_string = dict[key];
  if (typeof maybe_string === "string") {
    return maybe_string;
  }

  log_trace("return default value of empty string in lookup_string");
  return "";
};

var lookup_boolean = function lookup_boolean(dict, key) {

  if (typeof dict === "undefined") {
    return false;
  }

  if (typeof key === "undefined") {
    return false;
  }

  var maybe_boolean = dict[key];
  if (typeof maybe_boolean === "boolean") {
    return maybe_boolean;
  }

  return false;
};

var lookup_number = function lookup_number(dict, key) {

  if (typeof dict === "undefined") {
    return -1;
  }

  if (typeof key === "undefined") {
    return -1;
  }

  var maybe_number = dict[key];
  if (typeof maybe_number === "number") {
    return maybe_number;
  }

  return -1;
};

var lookup_array = function lookup_array(dict, key) {

  if (typeof dict === "undefined") {
    return [];
  }

  if (typeof key === "undefined") {
    return [];
  }

  var maybe_array = dict[key];
  if (maybe_array instanceof Array) {
    return maybe_array;
  }

  return [];
};

var lookup_default = function lookup_default(dict, key, _default) {

  if (typeof dict === "undefined") {
    return _default;
  }

  if (typeof dict[key] === "undefined") {
    return _default;
  }

  return dict[key];
};

var parse_json_with_check = function parse_json_with_check(str) {
  if (typeof str === "undefined") {
    log_warning("Tried to parse an undefined JSON string");
    return false;
  }

  if (typeof str !== "string") {
    log_warning("Tried to parse a JSON string that is not a string: " + JSON.stringify(str));
    return false;
  }

  try {
    var result = JSON.parse(str);
    return result;
  } catch (e) {
    log_warning("ADCController encountered a JSON parsing error with string: " + str);
  }

  return false;
};

var ADCAppOptions = (function () {
  function ADCAppOptions() {
    var _this = this;

    _classCallCheck(this, ADCAppOptions);

    this.options = {};

    $.message_dispatcher.register_message_handler(function (message) {
      _this.set_options(lookup(message, "options"));
    }, "Options.set_options");
  }

  ADCAppOptions.prototype.set_options = function set_options(options_dict) {
    var keys = Object.keys(options_dict);
    if (keys.length === 0) {
      return;
    }

    for (var i = 0; i < keys.length; ++i) {
      this.set_option(keys[i], options_dict[keys[i]]);
    }
  };

  ADCAppOptions.prototype.set_option = function set_option(key, value) {

    if (key === "ADC_USER_ID" && value !== "undefined") {
      var filepath = $.device.get_data_path() + "config.json";
      acni.delete_file(1, filepath, function (reply) {
        var success = lookup_boolean(reply, "success");
        if (success) {
          log_info("Successfully deleted stored config file");
        } else {
          log_warning("Failed to delete stored config file");
        }

        $.device.set_user_id(value);
        $.app.flush_ad_queue();
      });
    }

    this.options[key] = value;
    log_trace("Option with key: " + key + " was set with value: " + value);
  };

  return ADCAppOptions;
})();

var ADCCustomMessages = (function () {
  function ADCCustomMessages() {
    var _this2 = this;

    _classCallCheck(this, ADCCustomMessages);

    this.inbound = {};
    this.types = [];
    this.supported_messages = ["force_dec_url", "custom_zone_type", "reconfigurable", "foo"];

    $.message_dispatcher.register_message_handler(function (message) {
      _this2.receive(lookup_string(message, "type"), lookup_string(message, "message"), lookup_boolean(message, "needs_reply"), lookup_number(message, "id"));
    }, "CustomMessage.native_send");

    $.message_dispatcher.register_message_handler(function (message) {
      var type = lookup_string(message, "type");
      if (type === "") {
        return;
      }

      if (_this2.supported_messages.indexOf(type) === -1) {
        log_warning_public("Tried to register a handler for an unsupported message type: " + type + ". Ignoring");
        return;
      }

      _this2.types.push(type);

      if (type === "foo") {
        _this2.send("foo", "bar");
      }
    }, "CustomMessage.register");

    $.message_dispatcher.register_message_handler(function (message) {
      var type = lookup_string(message, "type");
      if (type === "") {
        return;
      }

      if (_this2.supported_messages.indexOf(type) === -1) {
        log_warning_public("Tried to unregister a handler for an unsupported message type: " + type + ". Ignoring");
        return;
      }

      _this2.types = _this2.types.filter(function (curr_type) {
        log_trace("Removing handler for type");
        return curr_type === type;
      });
    }, "CustomMessage.unregister");
  }

  ADCCustomMessages.prototype.send = function send(type, message) {
    acni.send_custom_message(1, type, message);
  };

  ADCCustomMessages.prototype.send_reply = function send_reply(id, obj) {
    acni.send_custom_message_reply(1, id, obj);
  };

  ADCCustomMessages.prototype.receive = function receive(type, message, needs_reply, reply_id) {

    if (type === "") {
      log_error("Undefined/empty custom message type");
      return;
    }

    if (message === "") {
      log_info("Undefined/empty message content");
    }

    log_info("Received custom message of type: " + type + " with content: " + message);

    log_info("Needs reply: " + needs_reply);
    if (needs_reply) {
      this.send_reply(reply_id, "This is a reply");
    }

    if (type === "force_dec_url") {
      $.app.force_dec_url(message);
    }

    this.inbound[type] = message;
  };

  return ADCCustomMessages;
})();

var ADCMessageDispatcher = (function () {
  function ADCMessageDispatcher() {
    _classCallCheck(this, ADCMessageDispatcher);

    this.current_message_id = 0;
    this.message_handlers = {};
    this.message_reply_handlers = {};
    this.outbound = [];
    this.max_messages = 100;
  }

  ADCMessageDispatcher.prototype.next_message_id = function next_message_id() {
    return this.current_message_id++;
  };

  ADCMessageDispatcher.prototype.queue_outbound_message = function queue_outbound_message(message, reply_handler) {
    if (message.m_id == undefined) {
      message.m_id = this.next_message_id();
    }

    var message_id = message.m_id;

    this.outbound.push(message);

    if (typeof reply_handler === "undefined" || reply_handler === null || typeof reply_handler !== "function") {
      return;
    }
    if (lookup(this.message_reply_handlers, message_id) === "undefined") {
      this.message_reply_handlers[message_id] = reply_handler;
    }

    return message_id;
  };

  ADCMessageDispatcher.prototype.register_message_handler = function register_message_handler(handler, message_type) {
    log_trace("Registering message handler for message type: " + message_type);

    if (lookup(this.message_handlers, message_type) === "undefined") {
      this.message_handlers[message_type] = [];
    }

    var handlers = lookup_array(this.message_handlers, message_type);
    for (var i = 0; i < handlers.length; ++i) {
      var first_handler = handlers[i];
      if (first_handler === handler) {
        log_warning("Tried to register multiple instances of the same message handler. Ignoring");
        return;
      }
    }

    this.message_handlers[message_type].push(handler);
  };

  ADCMessageDispatcher.prototype.unregister_reply_handler = function unregister_reply_handler(message_id) {
    log_trace("Unregistering message reply handler for message with id: " + message_id);
    delete this.message_reply_handlers[message_id];
  };

  ADCMessageDispatcher.prototype["package"] = function _package() {
    var how_many = this.outbound.length > this.max_messages ? this.max_messages : this.outbound.length;
    var outbound_messages = JSON.stringify(this.outbound.splice(0, how_many));

    return outbound_messages;
  };

  ADCMessageDispatcher.prototype.distribute = function distribute(inbound_messages) {
    inbound_messages = inbound_messages || [];

    for (var i = 0; i < inbound_messages.length; ++i) {
      var message = inbound_messages[i];
      var message_id = lookup_number(message, "m_id");
      var message_type = lookup_string(message, "m_type");

      if (message_type === "") {
        log_warning("Invalid message received. ignoring");
        continue;
      }

      if (message_id === -1) {
        log_warning("Invalid message received. ignoring");
        continue;
      }

      if (message_type === "reply") {
        if (lookup(this.message_reply_handlers, message_id) === "undefined") {
          log_info("No reply handler registered for message with id: " + message_id);
          continue;
        }

        var handler = this.message_reply_handlers[message_id];
        handler(message);
        this.unregister_reply_handler(message_id);
      } else {

        if (lookup_array(this.message_handlers, message_type).length === 0) {
          log_info("No handler has been registered to message type: " + message_type);
          continue;
        }

        var handlers = lookup_array(this.message_handlers, message_type);
        for (var j = 0; j < handlers.length; ++j) {
          var handler = handlers[j];
          handler(message);
        }
      }
    }
  };

  return ADCMessageDispatcher;
})();

var ADCControllerMessageDispatcher = (function (_ADCMessageDispatcher) {
  _inherits(ADCControllerMessageDispatcher, _ADCMessageDispatcher);

  function ADCControllerMessageDispatcher() {
    _classCallCheck(this, ADCControllerMessageDispatcher);

    _ADCMessageDispatcher.call(this);
  }

  ADCControllerMessageDispatcher.prototype["package"] = function _package() {

    if (typeof $.asset_manager !== "undefined" && $.asset_manager !== null) {
      $.asset_manager.pump_outbound_messages();
    }

    if (typeof $.network_manager !== "undefined" && $.network_manager !== null) {
      $.network_manager.pump_outbound_messages();
    }

    var how_many = this.outbound.length > this.max_messages ? this.max_messages : this.outbound.length;
    var outbound_messages = JSON.stringify(this.outbound.splice(0, how_many));

    return outbound_messages;
  };

  return ADCControllerMessageDispatcher;
})(ADCMessageDispatcher);

var ADCAppSession = (function () {
  function ADCAppSession(id) {
    var _this3 = this;

    _classCallCheck(this, ADCAppSession);

    this.id = id || "";
    this.length = 0;
    this.imp_count = 0;
    this.last_update = null;
    this.delay_failed_requests = true;
    this.start_time = 0;

    this.played_ads = {};
    this.playing_ads = {};
    this.paused_ads = {};
    this.ad_queue = {};

    $.message_dispatcher.register_message_handler(function (message) {
      _this3.start(message["id"]);
    }, "SessionInfo.on_start");

    $.message_dispatcher.register_message_handler(function (message) {
      _this3.report_session_end();
    }, "SessionInfo.on_stop");
  }

  ADCAppSession.prototype.start = function start(id) {
    this.id = id || this.id;
    this.length = 0;
    this.report_session_start();
    log_warning("Session with id: " + this.id + " started");

    this.start_time = Math.floor(new Date().getTime() / 1000);
    this.delay_failed_requests = true;
  };

  ADCAppSession.prototype.report_session_start = function report_session_start() {

    var url = $.app.get_app_tracking().get_tracking_url_for_event("session_start");
    var payload = {
      "sid": this.id
    };
    acni.network_request(1, "session_start", url, false, false, true, false, payload);

    var third_party_urls = $.app.get_app_tracking().get_third_party_tracking_urls_for_event("session_start");
    for (var i = 0; i < third_party_urls.length; ++i) {
      acni.network_request(1, "session_start", third_party_urls[i], true, false, true, false, payload);
    }

    $.device.update_advertiser_info();
  };

  ADCAppSession.prototype.report_session_end = function report_session_end() {
    log_warning("Session with id: " + this.id + " ended");

    var url = $.app.get_app_tracking().get_tracking_url_for_event("session_end");
    var payload = {
      "sid": this.id,
      "session_length": this.length
    };
    acni.network_request(1, "session_end", url, false, false, true, false, payload, function (response) {
      $.message_dispatcher.queue_outbound_message({
        "m_type": "SessionInfo.stopped",
        "m_origin": 1,
        "m_target": 0
      });
    });

    var third_party_urls = $.app.get_app_tracking().get_third_party_tracking_urls_for_event("session_end");
    for (var i = 0; i < third_party_urls.length; ++i) {
      acni.network_request(1, "session_end", third_party_urls[i], true, false, true, false, payload);
    }
  };

  ADCAppSession.prototype.update = function update() {
    if (this.last_update === null) {
      this.last_update = new Date();
    }

    var now = new Date();
    var diff = now.getTime() / 1000 - this.last_update.getTime() / 1000;
    if (diff > 0 && diff < 1) {
      this.length += diff;
    }

    this.last_update = now;
  };

  ADCAppSession.prototype.on_ad_playing = function on_ad_playing(ad_id, zone_id) {
    if (typeof ad_id === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    log_info("Inserting ad with id: " + ad_id + " into set of playing ads for zone: " + zone_id);
    this.insert_ad_into_set(ad_id, this.playing_ads, zone_id);

    log_info("Inserting ad with id: " + ad_id + " into set of played ads for zone: " + zone_id);
    this.insert_ad_into_set(ad_id, this.played_ads, zone_id);

    log_info("Incrementing current session impression count to " + ++this.imp_count);

    this.log_ad_history();
  };

  ADCAppSession.prototype.on_ad_paused = function on_ad_paused(ad_id, zone_id) {
    if (typeof ad_id === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    log_info("Removing ad with id: " + ad_id + " from set of playing ads for zone: " + zone_id);
    this.remove_ad_from_set(ad_id, this.playing_ads, zone_id);

    log_info("Inserting ad with id: " + ad_id + " into set of paused ads for zone: " + zone_id);
    this.insert_ad_into_set(ad_id, this.paused_ads, zone_id);

    this.log_ad_history();
  };

  ADCAppSession.prototype.on_ad_resumed = function on_ad_resumed(ad_id, zone_id) {
    if (typeof ad_id === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    log_info("Removing ad with id: " + ad_id + " from set of paused ads for zone: " + zone_id);
    this.remove_ad_from_set(ad_id, this.paused_ads, zone_id);

    log_info("Inserting ad with id: " + ad_id + " into set of playing ads for zone: " + zone_id);
    this.insert_ad_into_set(ad_id, this.playing_ads, zone_id);

    this.log_ad_history();
  };

  ADCAppSession.prototype.on_ad_finished = function on_ad_finished(ad_id, zone_id) {
    if (typeof ad_id === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    log_info("Removing ad with id: " + ad_id + " from set of playing ads for zone: " + zone_id);
    this.remove_ad_from_set(ad_id, this.playing_ads, zone_id);

    this.log_ad_history();
  };

  ADCAppSession.prototype.on_ad_destroyed = function on_ad_destroyed(ad_id, zone_id) {
    if (typeof ad_id === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    log_info("Removing ad with id: " + ad_id + " from set of playing ads for zone: " + zone_id);
    this.remove_ad_from_set(ad_id, this.playing_ads, zone_id);
  };

  ADCAppSession.prototype.log_ad_history = function log_ad_history() {
    log_trace("Playing ads: " + JSON.stringify(this.playing_ads));
    log_trace("Played ads: " + JSON.stringify(this.played_ads));
    log_trace("Paused ads: " + JSON.stringify(this.paused_ads));
  };

  ADCAppSession.prototype.insert_ad_into_set = function insert_ad_into_set(ad_id, set, zone_id) {
    if (typeof ad_id === "undefined" || typeof set === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    if (set.hasOwnProperty(zone_id)) {
      set[zone_id].push(ad_id);
    } else {
      set[zone_id] = [ad_id];
    }
  };

  ADCAppSession.prototype.remove_ad_from_set = function remove_ad_from_set(ad_id, set, zone_id) {
    if (typeof ad_id === "undefined" || typeof set === "undefined" || typeof zone_id === "undefined") {
      return;
    }

    var ads = lookup_array(set, zone_id);
    for (var i = 0; i < ads.length; ++i) {
      var ad_uuid = ads[i];
      if (ad_uuid === ad_id) {
        ads.splice(i, 1);
        --i;
      }
    }
  };

  ADCAppSession.prototype.get_play_history_for_zones = function get_play_history_for_zones(zone_ids) {

    if (!Array.isArray(zone_ids)) {
      return {};
    }

    var play_history = {};
    for (var i = 0; i < zone_ids.length; i++) {
      var zone_id = zone_ids[i];
      var played_ads = this.played_ads[zone_id];
      if (typeof played_ads !== "undefined") {
        play_history[zone_id] = played_ads;
      }
    }

    return play_history;
  };

  ADCAppSession.prototype.get_currently_playing_ads = function get_currently_playing_ads() {
    this.playing_ads = this.playing_ads || {};
    return this.playing_ads;
  };

  ADCAppSession.prototype.on_ads_invalidated = function on_ads_invalidated() {
    this.ad_queue = {};
  };

  ADCAppSession.prototype.reset = function reset(session_id) {
    this.id = session_id;
    this.length = 0;
    this.imp_count = 0;
    $.app.on_session_reset();
  };

  ADCAppSession.prototype.is_active = function is_active() {
    return this.active;
  };

  ADCAppSession.prototype.on_impression = function on_impression() {
    this.imp_count = this.imp_count || 0;
    this.imp_count++;
  };

  ADCAppSession.prototype.get_ad_history = function get_ad_history() {
    this.played_ads = this.played_ads || {};
    return this.played_ads;
  };

  ADCAppSession.prototype.get_ad_playing = function get_ad_playing() {
    this.playing_ads = this.playing_ads || {};
    return this.playing_ads;
  };

  ADCAppSession.prototype.get_ad_queue = function get_ad_queue() {
    this.ad_queue = this.ad_queue || {};
    return this.ad_queue;
  };

  ADCAppSession.prototype.get_id = function get_id() {
    this.id = this.id || "";
    return this.id;
  };

  ADCAppSession.prototype.get_length = function get_length() {
    this.length = this.length || -1;
    return this.length;
  };

  ADCAppSession.prototype.get_impression_count = function get_impression_count() {
    if (typeof this.imp_count === "undefined") {
      return -1;
    } else {
      return this.imp_count;
    }
  };

  return ADCAppSession;
})();

var ADCAdController = (function () {
  function ADCAdController() {
    var _this4 = this;

    _classCallCheck(this, ADCAdController);

    this.request_timeout = 15;

    this.ad_dictionary = [];

    this.delayed_requests = [];

    $.message_dispatcher.register_message_handler(function (message) {
      var user_metadata = lookup(lookup_default(message, "options", {}), "user_metadata");
      if (user_metadata !== "undefined") {
        $.app.set_user_metadata(user_metadata);
      }

      _this4.on_request(message);
    }, "AdSession.on_request");

    $.message_dispatcher.register_message_handler(function (message) {
      var zone_id = lookup_string(message, "zone_id");
      var request_type = lookup_number(message, "type");
      var ad_session_id = lookup_string(message, "id");

      var zone = $.app.zones[zone_id];
      var current_ad = lookup(_this4.ad_dictionary, ad_session_id);

      if (current_ad === "undefined") {

        return;
      }

      if (!current_ad.network_match()) {
        log_error_public("Unable to show ad due to current network settings. Please check that your internet connection is working.");
        return;
      }

      if (zone.get_v4vc() !== "undefined" && zone.get_v4vc().get_enabled() && lookup_boolean(message, "pre_popup")) {
        var description = "Watch a video to earn " + zone.get_v4vc().get_reward_amount() + " " + zone.get_v4vc().get_reward_name() + "?";
        acni.show_alert(1, ad_session_id, 1, description, "V4VC", "Yes", "No", undefined, function (reply) {
          if (lookup_boolean(reply, "positive")) {
            delete _this4.ad_dictionary[ad_session_id];
            _this4.launch_ad_unit(message, current_ad, zone._type, lookup_boolean(message, "post_popup"), 0);
          } else {}
        });
      } else if (request_type === 0) {
        delete _this4.ad_dictionary[ad_session_id];
        _this4.launch_ad_unit(message, current_ad, zone._type, lookup_boolean(message, "post_popup"), 0);
      }
    }, "AdSession.launch_ad_unit");

    $.message_dispatcher.register_message_handler(function (message) {
      var ad_session_id = lookup(message, "id");
      var ad = lookup(_this4.active_ads, ad_session_id);
      var zone = lookup(_this4.zones, ad_session_id);

      ad.set_playing(false);
      $.app.get_session().on_ad_destroyed(ad.get_uuid(), zone.get_uuid());
      ad.remove(true);

      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdSession.destroy_native_ad_view",
        "m_origin": 1,
        "m_target": 0,
        "id": ad_session_id
      }, function (reply) {
        var temp_origin = lookup_number(message, "m_origin");
        var temp_id = lookup_number(message, "m_id");
        reply["m_id"] = temp_id;
        reply["m_origin"] = 1;
        reply["m_target"] = temp_origin;
        reply["m_type"] = "reply";
        $.message_dispatcher.queue_outbound_message(reply);

        delete _this4.active_ads[ad_session_id];
        delete _this4.zones[ad_session_id];
        delete _this4.ad_dictionary[ad_session_id];
      });
    }, "AdUnit.on_native_ad_view_destroyed");

    $.message_dispatcher.register_message_handler(function (message) {
      var is_native = lookup_boolean(message, "is_native");
      var from_native = lookup_boolean(message, "from_native");

      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdSession.has_audio",
        "m_origin": 1,
        "m_target": 0,
        "id": lookup(message, "ad_session_id")
      }, function (message_reply) {
        var custom_data = {};
        custom_data["device_audio"] = lookup_boolean(message_reply, "has_audio");

        if (!from_native) {
          _this4.on_ad_event(message, is_native ? "native_start" : "start", custom_data);
        }
      });

      var ad_session_id = lookup(message, "ad_session_id");
      var ad = lookup(_this4.active_ads, ad_session_id);
      var zone = lookup(_this4.zones, ad_session_id);
      if (ad !== "undefined" && zone !== "undefined") {
        ad.set_played(true);
        ad.set_playing(true);
        $.app.get_session().on_ad_playing(ad.get_uuid(), zone.get_uuid());
        zone.check_zone_status();
      }
      _this4.call_on_ad_finished = null;
      _this4.video_finish_called = false;
    }, "AdUnit.on_start");

    $.message_dispatcher.register_message_handler(function (message) {

      if (lookup_boolean(message, "dissolved")) {
        _this4.on_ad_event(message, "card_dissolved");
      }

      if (lookup(message, "status") === 0) {
        var custom_data = {};
        custom_data["html_endcard_loading_started"] = lookup_boolean(message, "html_endcard_loading_started");
        custom_data["html_endcard_loading_finished"] = lookup_boolean(message, "html_endcard_loading_finished");
        _this4.on_ad_event(message, "continue", custom_data);
      } else {
        _this4.on_ad_event(message, "skip");
      }

      if (lookup_boolean(message, "video_finished") && !_this4.video_finish_called) {
        _this4.call_on_ad_finished = message;
        return;
      }

      var ad_session_id = lookup(message, "ad_session_id");
      _this4.prepare_finish_fullscreen_ad(ad_session_id, message);
    }, "AdUnit.on_finish");

    $.message_dispatcher.register_message_handler(function (message) {
      var ad_session_id = lookup_string(message, "ad_session_id");
      var ad = lookup(_this4.active_ads, ad_session_id);
      var zone = lookup(_this4.zones, ad_session_id);
      if (ad !== "undefined" && zone !== "undefined") {
        ad.set_playing(false);
        $.app.get_session().on_ad_paused(ad.get_uuid(), zone.get_uuid());
      }

      if (lookup_boolean(message, "is_native")) {
        _this4.on_ad_event(message, "video_paused");
      }
    }, "AdUnit.on_pause");

    $.message_dispatcher.register_message_handler(function (message) {
      var ad_session_id = lookup_string(message, "ad_session_id");
      var ad = lookup(_this4.active_ads, ad_session_id);
      var zone = lookup(_this4.zones, ad_session_id);
      if (ad !== "undefined" && zone !== "undefined") {
        ad.set_playing(true);
        $.app.get_session().on_ad_resumed(ad.get_uuid(), zone.get_uuid());
      }

      if (lookup_boolean(message, "is_native")) {
        _this4.on_ad_event(message, "video_resumed");
      }
    }, "AdUnit.on_resume");

    $.message_dispatcher.register_message_handler(function (message) {
      var custom_data = {};
      custom_data["click_type"] = lookup_string(message, "click_type");
      _this4.on_ad_event(message, "click", custom_data);
    }, "AdUnit.on_click");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "skip");
    }, "AdUnit.on_cancel");

    $.message_dispatcher.register_message_handler(function (message) {
      $.app.get_session().on_impression();

      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdSession.has_audio",
        "m_origin": 1,
        "m_target": 0,
        "id": lookup(message, "ad_session_id")
      }, function (message_reply) {
        var custom_data = {};
        custom_data["device_audio"] = lookup_boolean(message_reply, "has_audio");
        _this4.on_ad_event(message, "start", custom_data);
      });

      _this4.on_ad_event(message, "replay");
    }, "AdUnit.on_replay");

    $.message_dispatcher.register_message_handler(function (message) {
      var is_native = lookup_boolean(message, "is_native");
      _this4.on_ad_event(message, is_native ? "native_first_quartile" : "first_quartile");
    }, "AdUnit.on_video_first_quartile");

    $.message_dispatcher.register_message_handler(function (message) {
      var is_native = lookup_boolean(message, "is_native");
      _this4.on_ad_event(message, is_native ? "native_midpoint" : "midpoint");
    }, "AdUnit.on_video_midpoint");

    $.message_dispatcher.register_message_handler(function (message) {
      var is_native = lookup_boolean(message, "is_native");
      _this4.on_ad_event(message, is_native ? "native_third_quartile" : "third_quartile");
    }, "AdUnit.on_video_third_quartile");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "skip");
    }, "AdUnit.on_video_skip");

    $.message_dispatcher.register_message_handler(function (message) {
      var is_native = lookup_boolean(message, "is_native");

      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdSession.has_audio",
        "m_origin": 1,
        "m_target": 0,
        "id": lookup(message, "ad_session_id")
      }, function (message_reply) {
        var custom_data = {};
        custom_data["device_audio"] = lookup_boolean(message_reply, "has_audio");
        _this4.on_ad_event(message, is_native ? "native_complete" : "complete", custom_data);
        _this4.video_finish_called = true;
        if (_this4.call_on_ad_finished !== null) {
          _this4.prepare_finish_fullscreen_ad(lookup(message, "ad_session_id"), _this4.call_on_ad_finished);
        }
      });
    }, "AdUnit.on_video_finish");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "card_shown");
    }, "AdUnit.on_card_shown");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, lookup_string(message, "event_type"));
    }, "AdUnit.on_event");

    $.message_dispatcher.register_message_handler(function (message) {
      var custom_data = { "event_type": lookup_string(message, "event_type") };
      _this4.on_ad_event(message, "custom_event", custom_data);
    }, "AdUnit.on_custom_event");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, lookup_string(message, "event"));
    }, "AdUnit.on_in_video_engagement");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "html5_interaction");
    }, "AdUnit.on_html5_interaction");

    $.message_dispatcher.register_message_handler(function (message) {
      var custom_data = lookup(message, "custom_data");
      _this4.on_ad_event(message, "reward_v4vc", custom_data);
    }, "AdUnit.on_reward_v4vc");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "sound_mute");
    }, "AdUnit.on_mute");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "sound_unmute");
    }, "AdUnit.on_unmute");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "video_expanded");

      var passed_message = lookup(message, "message");
      var current_ad = _this4.active_ads[lookup(message, "ad_session_id")];

      passed_message["zone_id"] = current_ad.get_zone_id();
      passed_message["replay"] = lookup_boolean(message, "replay");
      passed_message["from_native"] = true;

      _this4.launch_ad_unit(passed_message, current_ad, 0, false, lookup_number(message, "elapsed"));

      var temp = lookup_number(message, "m_origin");
      message["m_origin"] = 1;
      message["m_target"] = temp;
      message["m_type"] = "reply";
      $.message_dispatcher.queue_outbound_message(message);
    }, "AdUnit.on_expand");

    $.message_dispatcher.register_message_handler(function (message) {
      _this4.on_ad_event(message, "native_overlay_click");
    }, "AdUnit.on_native_engagement");

    $.message_dispatcher.register_message_handler(function (message) {
      var ad_session_id = lookup_string(message, "ad_session_id");
      var ad = lookup(_this4.active_ads, ad_session_id);
      if (ad === "undefined") {
        log_warning("No AdColony Ad for ad session id: " + ad_session_id);
        return;
      }

      var zone = lookup(_this4.zones, ad_session_id);
      if (zone === "undefined") {
        log_warning("No AdColony Zone registered to the provided ad session id: " + ad_session_id);
        return;
      }

      var reward_name = lookup_string(message, "reward_name");
      var reward_amount = lookup_number(message, "reward_amount");
      if (reward_name === "" || reward_amount === -1) {
        log_warning("Invalid V4VC data");
        return;
      }

      var url = ad.get_tracking().get_tracking_url_for_event("reward_v4vc");
      if (!url) {
        log_warning("No URL defined for server-side V4VC event");
        return;
      }

      log_info("Contacting AdColony for server-side V4VC reward");

      var payload = {
        "reward_name": reward_name,
        "reward_amount": reward_amount,
        "sid": $.app.get_session().get_id(),
        "s_imp_count": $.app.get_session().get_impression_count(),
        "s_time": $.app.get_session().get_length()
      };
      acni.network_request(1, "adcolony_v4vc", url, false, true, true, true, payload, function (response) {
        var body = parse_json_with_check(lookup(response, "body"));
        if (!body) {
          acni.v4vc_reward(1, false, reward_amount, reward_name, zone.get_uuid());
          return;
        }

        var success = lookup_string(body, "status");
        if (success !== "success") {

          acni.v4vc_reward(1, false, reward_amount, reward_name, zone.get_uuid());
          return;
        }

        log_trace("AdColony granted reward. Invoking callback");
        var callback = lookup_string(body, "v4vc_callback");
        log_trace("V4VC callback: " + callback);

        acni.network_request(1, "publisher_v4vc", callback, true, true, true, false, undefined, function (response) {
          log_trace("V4VC callback response: " + JSON.stringify(response));

          var success = lookup_string(response, "status") === "success" ? true : false;
          if (!success) {
            log_info("Server-side V4VC callback was unsuccessful. Notifying app");
          } else {
            log_info("Server-side V4VC callback successful. Notifying app");
          }

          acni.v4vc_reward(1, success, reward_amount, reward_name, zone.get_uuid());
        });
      });
    }, "AdUnit.on_v4vc_request");

    $.message_dispatcher.register_message_handler(function (message) {
      log_info("Controller detecting SessionInfo.on_pause message");
    }, "SessionInfo.on_pause");

    $.message_dispatcher.register_message_handler(function (message) {
      log_info("Controller detecting SessionInfo.on_resume message");
      $.device.update_advertiser_info();
    }, "SessionInfo.on_resume");

    $.message_dispatcher.register_message_handler(function (message) {
      log_info("handler called");
      var url = $.app.get_app_tracking().get_tracking_url_for_event("adc_in_app_purchase");
      if (!url) {
        log_trace("No tracking URL defined for IAP reports");
      } else {
        var transaction_id = lookup_string(message, "transaction_id");
        var product_id = lookup_string(message, "product_id");
        var price = lookup_number(message, "price");
        var currency_code = lookup_string(message, "currency_code");
        if (transaction_id === "undefined" || product_id === "undefined") {
          return;
        }

        var payload = {
          "transaction_id": transaction_id,
          "product_id": product_id,
          "price": price >= 0 ? price : undefined,
          "currency_code": currency_code !== "undefined" ? currency_code : undefined
        };
        acni.network_request(1, "adc_in_app_purchase", url, false, false, true, false, payload);
      }
    }, "AdColony.on_iap_report");

    this.active_ads = {};
    this.zones = {};
  }

  ADCAdController.prototype.prepare_finish_fullscreen_ad = function prepare_finish_fullscreen_ad(ad_session_id, message) {
    var _this5 = this;

    var zone = lookup(this.zones, ad_session_id);
    if (zone.get_v4vc() !== "undefined" && zone.get_v4vc().get_enabled() && lookup_boolean(message, "post_popup")) {
      var text = "Thanks for watching the sponsored video. You earned " + zone.get_v4vc().get_reward_amount() + " " + zone.get_v4vc().get_reward_name() + ".";
      acni.show_alert(1, ad_session_id, 1, text, "V4VC", "OK", undefined, false, function () {
        _this5.on_ad_finished(message);
      });
    } else {
      this.on_ad_finished(message);
    }
  };

  ADCAdController.prototype.on_request = function on_request(message) {
    var zone_id = lookup_string(message, "zone_id");
    var request_type = lookup_number(message, "type");
    var ad_session_id = lookup_string(message, "id");

    var request_time = Math.floor(new Date().getTime() / 1000);

    if (lookup_number(message, "request_time") === -1) {

      message["request_time"] = request_time;
    }

    if (lookup($.app.zones, zone_id) === "undefined") {
      if ($.device.os_name.toLowerCase() === "Android".toLowerCase()) {
        log_warning_public("Ad request with invalid zone");
      }
      return this.on_failed_request(ad_session_id, request_type, 3, null);
    }

    var zone = $.app.zones[zone_id];
    var current_ad = zone.current_ad();

    if (request_type === 2 && zone._type !== 2) {
      log_warning_public("Instant-Feed ad request made with non Instant-Feed enabled zone.");
      zone.request_fail_reason = 13;
      return this.on_failed_request(ad_session_id, request_type, 3, null);
    }

    if (request_type === 2 && (lookup_number(message, "width") <= 0 || lookup_number(message, "height") <= 0)) {
      log_warning_public("Instant-Feed ad request made with invalid ad size. Width and height must be greater than zero.");
      return this.on_failed_request(ad_session_id, request_type, 3, null);
    }

    if (current_ad !== "undefined") {

      if (request_type === 0 && (!$.app.get_has_ad_unit() || !$.app.get_has_mraid())) {
        delete this.delayed_requests[ad_session_id];
        return this.on_failed_request(ad_session_id, zone._type, 4, zone);
      }

      if (request_type === 2 && (!$.app.get_has_if_ad_unit() || !$.app.get_has_mraid())) {
        delete this.delayed_requests[ad_session_id];
        return this.on_failed_request(ad_session_id, zone._type, 4, zone);
      }

      var payload = {};
      payload["request_denied"] = false;
      payload["request_denied_reason"] = 0;
      payload["user_metadata"] = $.app.get_user_metadata();
      this.on_zone_event("request", zone, payload);
      log_trace("Successful zone request detected");

      log_info("Ad request succeeded, an ad is available to be played. Type = " + request_type);
      current_ad.serve();
      this.ad_dictionary[ad_session_id] = current_ad;
      if (request_type === 0) {
        var iap = current_ad.get_v4iap();
        var iap_enabled = Object.keys(iap).length > 0;

        acni.interstitial_available(1, ad_session_id, iap_enabled);

        log_info("AdSession.interstitial_available message sent");
      } else if (request_type === 2) {
        this.launch_ad_unit(message, current_ad, 2, false, 0);

        log_info("Launching instant-feed ad unit with ad session id = " + ad_session_id);
      }
      $.app.get_session().delay_failed_requests = false;
      delete this.delayed_requests[ad_session_id];
      return true;
    }

    if ($.network_manager.get_active_requests_count() === 0 && $.network_manager.get_waiting_requests_count() === 0 || request_time - lookup_number(message, "request_time") > 15) {
      if ((request_time - lookup_number(message, "request_time") > 15 || lookup(this.delayed_requests, ad_session_id) === "undefined") && request_time - $.app.get_session().start_time > 15) {
        log_trace("Failed zone request detected. Zone has no fill");
        delete this.delayed_requests[ad_session_id];
        return this.on_failed_request(ad_session_id, zone._type, 4, zone);
      } else {
        this.delayed_requests[ad_session_id] = message;
      }
    } else {
      this.delayed_requests[ad_session_id] = message;
    }
  };

  ADCAdController.prototype.launch_ad_unit = function launch_ad_unit(message, current_ad, _type, post_popup, elapsed) {
    var _this6 = this;

    var zone_id = lookup_string(message, "zone_id");
    var ad_session_id = lookup_string(message, "id");
    var zone = $.app.zones[zone_id];

    var replay = lookup_boolean(message, "replay");

    if (!current_ad.network_match()) {
      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdSession.finish_fullscreen_ad",
        "m_origin": 1,
        "m_target": 0,
        "id": ad_session_id,
        "status": 3,
        "container_id": 1
      });
      return;
    }

    var info = $.device.get_info_for_ad_unit();

    if (current_ad.adunit_type == 0) {
      info["mraid_filepath"] = $.app.get_mraid_filepath();
      info["video_path"] = $.device.get_media_path() + current_ad.get_video_uuid();
      info["html_tag"] = $.app.should_force_dec_url() ? $.app.get_forced_dec_url() : current_ad.get_dec_base_url();
      info["video_width"] = current_ad.get_video_width();
      info["video_height"] = current_ad.get_video_height();
      info["dec_source_path"] = current_ad.get_dec_source_path();
      info["skippable"] = current_ad.is_skippable();
      info["skip_delay"] = current_ad.get_skip_delay();
      info["button_paths"] = current_ad.get_button_paths();

      info["haptic_filepath"] = current_ad.get_haptic_filepath();

      info["width"] = lookup_number(message, "width");
      info["height"] = lookup_number(message, "height");
      info["advertiser_name"] = current_ad.get_native().get_advertiser_name();
      info["title"] = current_ad.get_native().get_title();
      info["description"] = current_ad.get_native().get_description();
      info["message"] = message;

      info["elapsed"] = elapsed;
      info["replay"] = replay;
      info["first_quartile"] = lookup_boolean(message, "first_quartile");
      info["midpoint"] = lookup_boolean(message, "midpoint");
      info["third_quartile"] = lookup_boolean(message, "third_quartile");
      info["start"] = lookup_boolean(message, "start");
      info["expanded"] = lookup_number(message, "expanded");

      info["dissolve"] = current_ad.get_dec_dissolve_enabled();
      info["dissolve_delay"] = current_ad.get_dec_dissolve_delay();
    }

    info["ad_session_id"] = ad_session_id;
    info["zone_id"] = zone.get_uuid();
    info["post_popup"] = post_popup;
    info["os_name"] = $.device.get_os_name();

    if (_type === 2) {
      info["native_overlay_enabled"] = current_ad.get_native().get_overlay().is_enabled();
      info["native_label"] = current_ad.get_native().get_overlay().get_label();
      info["native_click_action"] = current_ad.get_native().get_overlay().get_click_action();
      info["native_click_action_type"] = current_ad.get_native().get_overlay().get_click_action_type();
      info["poster_filepath"] = current_ad.get_native_poster().get_filepath();
      info["thumb_filepath"] = current_ad.get_native().get_thumb().get_filepath();
      info["poster_click_action"] = current_ad.get_native_poster().get_click_action();
      info["poster_click_action_type"] = current_ad.get_native_poster().get_click_action_type();
      info["mute_filepath"] = $.device.get_media_path() + current_ad.get_native().get_mute_uuid();
      info["unmute_filepath"] = $.device.get_media_path() + current_ad.get_native().get_unmute_uuid();
    }

    if (current_ad.adunit_type == 0) {
      info["image_overlay"] = current_ad.get_ive().is_enabled() && current_ad.get_ive().is_image_overlay_enabled();
      info["text_overlay"] = current_ad.get_ive().is_enabled() && !current_ad.get_ive().is_image_overlay_enabled();
      info["engagement_type"] = current_ad.get_ive().get_click_type();
      info["engagement_action"] = current_ad.get_ive().get_click_action();
      info["engagement_height"] = current_ad.get_ive().get_height();
      info["engagement_width"] = current_ad.get_ive().get_width();
      info["image_normal_filepath"] = current_ad.get_ive().get_image_normal_filepath();
      info["image_down_filepath"] = current_ad.get_ive().get_image_down_filepath();
      info["engagement_delay"] = current_ad.get_ive().get_delay();
      info["engagement_event"] = current_ad.get_ive().get_event();
      info["label_html"] = current_ad.get_ive().get_label_html();

      info["label"] = current_ad.get_ive().get_label();
      if ($.device.os_name.toLowerCase() === "Android".toLowerCase()) {
        info["web_overlay"] = false;
        if (info["image_overlay"]) {
          info["image_normal_filepath"] = current_ad.get_ive().get_image_overlay_filepath();
        }
      } else {
        info["web_overlay"] = current_ad.get_ive().is_enabled() && current_ad.get_ive().is_ready();
      }
    }

    if (Object.keys(current_ad.get_v4iap()).length > 0) {
      info["v4iap"] = current_ad.get_v4iap();
    }

    var metadata = {};
    metadata["idfa"] = $.device.advertiser_id;
    metadata["google_ad_id"] = $.device.advertiser_id;
    metadata["sha1_android_id"] = $.device.android_id;
    metadata["platform"] = $.device.os_name;
    metadata["adc_version"] = "";
    metadata["os_version"] = $.device.os_version;
    metadata["device_model"] = $.device.model;
    metadata["device_type"] = $.device.device_type;
    metadata["network_type"] = $.device.network_type;
    metadata["ip_address"] = $.app.ip;
    metadata["adc_lat"] = $.app.lat;
    metadata["adc_long"] = $.app._long;
    metadata["zip_code"] = $.app.zip;
    metadata["country_code"] = $.device.locale_country_code;
    metadata["dma_code"] = $.app.dma;
    metadata["language"] = $.device.locale_language_code;

    metadata["raw_ad_campaign_id"] = current_ad.campaign_id;
    metadata["raw_ad_group_id"] = current_ad.group_id;
    metadata["raw_ad_creative_id"] = current_ad.creative_id;
    metadata["ad_campaign_name"] = current_ad.ad_campaign_name;
    metadata["ad_group_name"] = current_ad.ad_group_name;
    metadata["ad_creative_name"] = current_ad.ad_creative_name;
    metadata["zone_uuid"] = zone_id;
    metadata["zone_id"] = zone_id;

    metadata["publisher_id"] = $.app.pub_id;

    metadata["app_id"] = $.app.app_id;
    metadata["raw_app_id"] = $.app.raw_app_id;
    metadata["app_name"] = $.app.app_name;

    var v4vc = zone.get_v4vc();
    info["v4vc_enabled"] = v4vc === "undefined" ? false : v4vc.get_enabled();
    info["client_side"] = v4vc === "undefined" ? false : v4vc.is_client_side();
    info["reward_name"] = v4vc === "undefined" ? "" : v4vc.get_reward_name();
    info["reward_amount"] = v4vc === "undefined" ? 0 : v4vc.get_reward_amount();

    info["metadata"] = metadata;

    var filepath = _type === 2 ? $.app.get_if_ad_unit_filepath() : $.app.get_ad_unit_filepath();

    if (current_ad.adunit_type == 1) {

      filepath = $.device.get_media_path() + current_ad.manifest.assets[0];

      acni.load_module(1, ad_session_id, undefined, info, true, false, true, undefined, filepath, function (reply) {
        var success = lookup_boolean(reply, "success");
        var module_id = lookup_number(reply, "id");
        if (success) {
          current_ad.set_module_id(module_id);

          $.message_dispatcher.queue_outbound_message({
            "m_type": "Module.usurp",
            "m_origin": 1,
            "m_target": module_id,
            "ad_session_id": _this6.ad_session_id,
            "container_id": 1,
            "new_module_id": module_id
          }, function (message_reply) {});

          log_info("Module with id: " + module_id + " successfully loaded for ad session: " + ad_session_id);
        } else {
          log_warning("Could not load module with id: " + module_id + " for ad session: " + ad_session_id);
        }
      });
    } else {
      acni.load_module(1, ad_session_id, undefined, info, false, false, false, undefined, filepath, function (reply) {
        var success = lookup_boolean(reply, "success");
        var module_id = lookup_number(reply, "id");
        if (success) {
          current_ad.set_module_id(module_id);
          log_info("Module with id: " + module_id + " successfully loaded for ad session: " + ad_session_id);
        } else {
          log_warning("Could not load module with id: " + module_id + " for ad session: " + ad_session_id);
        }
      });
    }

    if (_type === 2) {
      current_ad.set_played(true);
    }

    current_ad.set_ad_session_id(ad_session_id);
    this.active_ads[ad_session_id] = current_ad;
    this.zones[ad_session_id] = zone;
  };

  ADCAdController.prototype.expiration_check = function expiration_check() {
    for (var key in this.ad_dictionary) {
      if (!this.ad_dictionary.hasOwnProperty(key)) {
        continue;
      }
      var time = Math.floor(new Date().getTime() / 1000);
      var ad = this.ad_dictionary[key];

      if (time - ad.get_parse_time() > ad.get_expiration() - 5 || ad.get_invalidated()) {
        if (!ad.is_native) {
          acni.expiration(key, ad.get_zone_type());
          ad.remove(false);
          delete this.ad_dictionary[key];
        }
      }
    }
  };

  ADCAdController.prototype.on_failed_request = function on_failed_request(ad_session_id, type, _status, zone) {
    _status = _status || 7;
    if (type === 0) {
      acni.interstitial_unavailable(1, ad_session_id);
      acni.destroy_ad_session(1, ad_session_id);
    } else if (type === 2) {
      acni.native_ad_view_unavailable(1, ad_session_id);
    } else {

      acni.interstitial_unavailable(1, ad_session_id);
      acni.destroy_ad_session(1, ad_session_id);
    }

    if (zone != null && typeof zone !== "undefined") {
      var payload = {};
      payload["request_denied"] = true;
      payload["request_denied_reason"] = zone.get_request_fail_reason();
      this.on_zone_event("request", zone, payload);
    }

    return false;
  };

  ADCAdController.prototype.on_ad_finished = function on_ad_finished(message) {
    var ad_session_id = lookup(message, "ad_session_id");
    var ad = lookup(this.active_ads, ad_session_id);
    var zone = lookup(this.zones, ad_session_id);
    if (ad_session_id !== "undefined" && ad !== "undefined" && zone !== "undefined") {
      ad.set_playing(false);
      $.app.get_session().on_ad_finished(ad.get_uuid(), zone.get_uuid());

      if (ad.get_native() && !ad.get_native().is_enabled()) {
        ad.remove(false);
        delete this.active_ads[ad_session_id];
        delete this.zones[ad_session_id];
      }
    }

    var temp = lookup_number(message, "m_origin");
    message["m_origin"] = 1;
    message["m_target"] = temp;
    message["m_type"] = "reply";
    $.message_dispatcher.queue_outbound_message(message);
  };

  ADCAdController.prototype.on_zone_event = function on_zone_event(request_type, zone, custom_data) {

    var url = zone.get_tracking().get_tracking_url_for_event(request_type);
    if (url) {
      log_trace("Tracking url defined. Sending zone event with payload: " + JSON.stringify(custom_data));

      if (typeof custom_data !== "undefined") {
        custom_data["sid"] = $.app.get_session().get_id();
      }

      acni.network_request(1, request_type, url, false, zone.is_rewarded(), true, false, custom_data);
    } else {
      log_trace("No tracking URL defined for " + request_type + " ad-start event");
    }

    var urls = zone.get_tracking().get_third_party_tracking_urls_for_event(request_type);
    if (!urls) {
      log_trace("No third-party tracking URLs defined for " + request_type + " ad event");
    } else {
      for (var i = 0; i < urls.length; ++i) {
        acni.network_request(1, request_type, urls[i], true, zone.is_rewarded(), false, true);
      }
    }
  };

  ADCAdController.prototype.on_ad_event = function on_ad_event(message, request_type, custom_data) {
    var ad_session_id = lookup(message, "ad_session_id");
    if (ad_session_id !== "undefined") {

      var ad = lookup(this.active_ads, ad_session_id);
      var zone = lookup(this.zones, ad_session_id);

      if (ad === "undefined") {
        log_error("No ad mapped to ad session id = " + ad_session_id);
        return;
      }

      if (zone === "undefined") {
        log_error("No zone mapped to ad session id = " + ad_session_id);
        return;
      }

      var url = ad.get_tracking().get_tracking_url_for_event(request_type);
      if (!url) {
        log_trace("No tracking URL defined for " + request_type + " ad event");
      } else {

        var replay = lookup_boolean(message, "replay");
        var reward = lookup_boolean(message, "reward");
        var payload = {
          "replay": replay,
          "reward": reward,
          "ad_slot": $.app.get_session().get_impression_count(),
          "sid": $.app.get_session().get_id(),
          "s_imp_count": $.app.get_session().get_impression_count(),
          "s_time": $.app.get_session().get_length(),
          "asi": ad_session_id
        };

        if (typeof custom_data !== "undefined" && typeof custom_data === "object") {
          payload = this.merge_dictionaries(payload, custom_data);
        }

        acni.network_request(1, request_type, url, false, zone.is_rewarded(), true, false, payload);
      }

      var urls = ad.get_tracking().get_third_party_tracking_urls_for_event(request_type);
      if (!urls) {
        log_trace("No third-party tracking URLs defined for " + request_type + " ad event");
      } else {
        for (var i = 0; i < urls.length; ++i) {
          if (urls[i] === "") {
            continue;
          }

          acni.network_request(1, request_type, urls[i], true, false, false, false);
        }
      }
    } else {
      log_error("Invalid ad session id sent to " + request_type + ": " + ad_session_id);
    }
  };

  ADCAdController.prototype.merge_dictionaries = function merge_dictionaries(dict1, dict2) {
    var new_dict = {};

    for (var key in dict1) {
      new_dict[key] = dict1[key];
    }

    for (var key in dict2) {
      new_dict[key] = dict2[key];
    }

    return new_dict;
  };

  return ADCAdController;
})();

var ADCAssetDownload = (function () {
  function ADCAssetDownload(message, uuid, completion_handler, is_bundle) {
    _classCallCheck(this, ADCAssetDownload);

    this.attempts = 0;
    this.startTime = new Date();
    this.message = message;
    this.next_retry_date = new Date();
    this.url = lookup_string(this.message, "url");
    this.filename = uuid;
    this.completion_handler = completion_handler;
    this.is_bundle = is_bundle;
  }

  ADCAssetDownload.prototype.is_eligible_for_retry = function is_eligible_for_retry() {
    if (this.filename === undefined || this.filename === null || this.filename === "") {
      return false;
    }

    var url = this.get_url();

    if (this.attempts >= 24) {
      log_warning("Asset download at url: " + url + " has met the max number of downloads");
      $.asset_manager.on_download_max_attempts_met(url);
      return false;
    }

    var current_date = new Date();
    if (+this.next_retry_date <= +current_date) {
      return true;
    } else {
      return false;
    }
  };

  ADCAssetDownload.prototype.update_next_retry_date = function update_next_retry_date() {
    var next_retry = this.get_next_retry_date();
    switch (this.attempts) {
      case 0:
        break;
      case 1:
        next_retry.setSeconds(next_retry.getSeconds() + 2);
        break;
      case 2:
        next_retry.setSeconds(next_retry.getSeconds() + 60);
        break;
      case 3:
        next_retry.setSeconds(next_retry.getSeconds() + 300);
        break;
      case 4:
        next_retry.setSeconds(next_retry.getSeconds() + 1200);
        break;
      default:
        next_retry.setSeconds(next_retry.getSeconds() + 3600);
        break;
    }
  };

  ADCAssetDownload.prototype.on_started = function on_started() {
    if (this.attempts == 0) {
      this.startTime = new Date();
    }
    ++this.attempts;
    this.update_next_retry_date();
  };

  ADCAssetDownload.prototype.on_finished = function on_finished() {
    var endTime = new Date();
    var timeTaken = endTime.getTime() - this.startTime.getTime();
    var h = this.startTime.getHours();
    var min = this.startTime.getMinutes();
    var s = this.startTime.getSeconds();
    var ms = this.startTime.getMilliseconds();
    log_warning("Configure: Total Time to download asset (ms): " + timeTaken + " for url: " + this.url + " and started at " + h + ":" + min + ":" + s + ":" + ms + ".");

    if (typeof this.completion_handler !== "undefined" && this.completion_handler !== null) {
      this.completion_handler(this.url);
      this.completion_handler = null;
    }
  };

  ADCAssetDownload.prototype.get_message = function get_message() {
    this.message = this.message || {};
    return this.message;
  };

  ADCAssetDownload.prototype.get_next_retry_date = function get_next_retry_date() {
    this.next_retry_date = this.next_retry_date || new Date();
    return this.next_retry_date;
  };

  ADCAssetDownload.prototype.get_url = function get_url() {
    this.url = this.url || "";
    return this.url;
  };

  ADCAssetDownload.prototype.get_filename = function get_filename() {
    this.filename = this.filename || "";
    return this.filename;
  };

  return ADCAssetDownload;
})();

var ADCAssetManager = (function () {
  function ADCAssetManager(listing) {
    var _this7 = this;

    _classCallCheck(this, ADCAssetManager);

    this.waiting_downloads = [];
    this.active_downloads = [];
    this.active_download_count = 0;
    this.media_pool = new ADCMediaPool(listing);

    $.message_dispatcher.register_message_handler(function (message) {
      var uuid = lookup_string(message, "uuid");
      var download_config = lookup(message, "download_config");
      if (uuid === "") {
        return;
      }

      _this7.queue_outbound_download(new ADCAssetDownload(download_config, uuid, function (url) {
        acni.on_download_complete(uuid, url);
      }));
    }, "Controller.queue_download");
  }

  ADCAssetManager.prototype.queue_outbound_download = function queue_outbound_download(download) {
    if (typeof download === "undefined" || download.get_url() === "") {
      log_warning("Tried to queue an invalid download: " + JSON.stringify(download) + " Ignoring");
      return;
    }

    log_info("Queueing asset download with url: " + download.get_url());

    this.insert_prioritized(download);
  };

  ADCAssetManager.prototype.insert_prioritized = function insert_prioritized(download) {

    var waiting = this.get_waiting_downloads();
    var index_to_insert = 0;
    for (var i = waiting.length - 1; i >= 0; --i) {
      var waiting_download = waiting[i];
      if (+download.get_next_retry_date() >= +waiting_download.get_next_retry_date()) {
        index_to_insert = i + 1;
        break;
      }
    }

    log_trace("Inserting download at url: " + download.get_url() + " into waiting queue at index: " + index_to_insert);
    waiting.splice(index_to_insert, 0, download);
  };

  ADCAssetManager.prototype.pump_outbound_messages = function pump_outbound_messages() {
    var _this8 = this;

    var waiting = this.get_waiting_downloads();
    var active = this.get_active_downloads();

    if (waiting.length === 0) {
      return [];
    }

    if (this.active_download_count === 2) {
      return [];
    }

    var outbound_downloads = [];
    var allowed = 2 - this.active_download_count;
    if (allowed > waiting.length) {
      allowed = waiting.length;
    }

    for (var i = 0; i < allowed; ++i) {
      if (waiting.length === 0) {
        break;
      }

      var download = waiting[0];
      if (!download.is_eligible_for_retry()) {
        break;
      }

      download = waiting.shift();

      active.push(download);
      $.message_dispatcher.queue_outbound_message(download.get_message(), function (message_reply) {
        var response_code = lookup_number(message_reply, "status");
        var url = lookup_string(message_reply, "url");
        var size = lookup_number(message_reply, "size");
        var message_id = lookup_number(message_reply, "m_id");
        var active = _this8.get_active_downloads();
        var download = _this8.get_download(active, url);

        if (response_code >= 200 && response_code <= 299) {
          log_info("Download from url: " + url + " succeeded");
          _this8.on_download_complete(download, size);

          $.message_dispatcher.unregister_reply_handler(message_id);
        } else if (_this8.get_download(active, url)) {
          log_info("Download from url: " + url + " was not successful");
          _this8.queue_outbound_download(download);
        }

        _this8.remove_download(active, url);

        --_this8.active_download_count;
      });
      download.on_started();

      ++this.active_download_count;
    }

    return outbound_downloads;
  };

  ADCAssetManager.prototype.on_download_complete = function on_download_complete(download, size) {
    var active = this.get_active_downloads();
    if (active.indexOf(download) == -1) {
      log_warning("Active ads list does not contain download: " + JSON.stringify(download));
    } else {

      download.on_finished();

      if (!download.is_bundle) {
        this.media_pool.add_file(download.get_filename(), download.get_url(), size);
      }
    }
  };

  ADCAssetManager.prototype.on_download_max_attempts_met = function on_download_max_attempts_met(url) {
    var waiting = this.get_waiting_downloads();
    for (var i = 0; i < waiting.length; ++i) {
      if (waiting[i].get_url() === url) {
        waiting.splice(i, 1);
        this.remove_download(waiting, url);
      }
    }
  };

  ADCAssetManager.prototype.get_waiting_downloads = function get_waiting_downloads() {
    this.waiting_downloads = this.waiting_downloads || [];
    return this.waiting_downloads;
  };

  ADCAssetManager.prototype.get_active_downloads = function get_active_downloads() {
    this.active_downloads = this.active_downloads || [];
    return this.active_downloads;
  };

  ADCAssetManager.prototype.get_download = function get_download(array, url) {
    if (!array) {
      return null;
    }

    for (var i = 0; i < array.length; ++i) {
      if (array[i].get_url() === url) {
        return array[i];
      }
    }

    return null;
  };

  ADCAssetManager.prototype.remove_download = function remove_download(array, url) {
    if (!array) {
      return false;
    }

    for (var i = 0; i < array.length; ++i) {
      if (array[i].get_url() === url) {
        array.splice(i, 1);
        log_trace("Removed download for url: " + url + " from queue of downloads");
        return true;
      }
    }

    log_warning("Failed to remove download for url: " + url + " from queue of downloads");
    return false;
  };

  ADCAssetManager.prototype.get_uuid_for_file = function get_uuid_for_file(url) {
    return this.media_pool.get_uuid_for_file(url);
  };

  ADCAssetManager.prototype.file_exists = function file_exists(url) {
    return this.media_pool.file_exists(url);
  };

  ADCAssetManager.prototype.get_path = function get_path(url) {
    return this.media_pool.get_path(url);
  };

  ADCAssetManager.prototype.add_file = function add_file(uuid, url, data, size, reply_handler) {
    log_trace("Asset manager saving file with uuid: " + uuid + " and URL: " + url);

    var filepath = $.device.get_media_path() + uuid;
    acni.save_file(1, filepath, data, undefined, undefined, reply_handler);
    this.media_pool.add_file(uuid, url, size);
  };

  ADCAssetManager.prototype.set_removable = function set_removable(url, removable) {
    this.media_pool.set_removable(url, removable);
  };

  ADCAssetManager.prototype.set_all_removable = function set_all_removable() {
    this.media_pool.set_all_removable();
  };

  ADCAssetManager.prototype.remove_file = function remove_file(uuid, url) {
    var _this9 = this;

    var filepath = $.device.get_media_path() + uuid;
    acni.delete_file(1, filepath, function (reply) {
      var success = lookup_boolean(reply, "success");
      if (success) {
        log_trace("File was deleted successfully");
        _this9.media_pool.remove_file(url);
      } else {
        log_trace("File was not deleted successfully");
      }
    });
  };

  return ADCAssetManager;
})();

var ADCMediaPool = (function () {
  function ADCMediaPool(listing) {
    _classCallCheck(this, ADCMediaPool);

    this.media = {};
    if (listing) {
      var keys = Object.keys(listing);
      for (var i = 0; i < keys.length; ++i) {
        var url = keys[i];
        this.media[url] = listing[url];
      }
    }

    this.unremovable_urls = ["https://s3.amazonaws.com/adc3/MRAID/MRAID.js", "https://s3.amazonaws.com/adc3/AdUnit/ADCAdUnit.js", "https://s3.amazonaws.com/adc3/IFAdUnit/ADCInstantFeedAdUnit.js"];
  }

  ADCMediaPool.prototype.add_file = function add_file(uuid, url, size) {

    if (url === "") {
      log_warning("Ignoring add_file due to an empty URL");
      return;
    }
    var file = {};
    var total_size = lookup_number(this.media, "size");
    file["uuid"] = uuid;
    file["size"] = size;
    file["date"] = new Date().getTime();
    file["removable"] = 1;

    total_size += size;

    this.media["size"] = total_size;
    this.media[url] = file;

    log_info("Saving media pool info");
    log_trace("Current media pool info: " + JSON.stringify(this.media));

    if (total_size > $.app.get_media_pool_size()) {
      this.remove_oldest();
      return;
    }

    this.save_media_file();
  };

  ADCMediaPool.prototype.remove_file = function remove_file(url) {
    this.media["size"] -= lookup_number(this.media[url], "size");
    delete this.media[url];
    this.save_media_file();

    log_info("Removing file of size " + lookup_number(this.media[url], "size") + " with url " + url);

    var total_size = lookup_number(this.media, "size");
    if (total_size > $.app.get_media_pool_size()) {
      this.remove_oldest();
    }
  };

  ADCMediaPool.prototype.remove_oldest = function remove_oldest() {

    var oldest = 0;
    var oldest_url = "";
    for (var key in this.media) {
      var date = lookup_number(this.media[key], "date");
      var removable = lookup_number(this.media[key], "removable");
      if (removable < 1 && date > 0 && (date < oldest || oldest === 0) && this.unremovable_urls.indexOf(key) === -1) {
        oldest = date;
        oldest_url = key;
      }
    }

    if (oldest_url !== "") {
      var oldest_uuid = lookup_string(this.media[oldest_url], "uuid");
      $.asset_manager.remove_file(oldest_uuid, oldest_url);
    }
  };

  ADCMediaPool.prototype.set_removable = function set_removable(url, removable) {
    if (lookup(this.media, url) !== "undefined") {
      if (removable) {
        this.media[url].removable--;
      } else {
        this.media[url].removable++;
      }

      this.save_media_file();
    }
  };

  ADCMediaPool.prototype.set_all_removable = function set_all_removable() {
    for (var key in this.media) {
      if (key.indexOf("output_sdk_assets") < 0 && this.unremovable_urls.indexOf(key) < 0 && key !== "size") {
        this.media[key]["removable"] = 0;
      }
    }
    this.save_media_file();
  };

  ADCMediaPool.prototype.get_uuid_for_file = function get_uuid_for_file(url) {
    var dict = lookup(this.media, url);
    if (dict === "undefined") {
      return "";
    }

    return lookup_string(dict, "uuid");
  };

  ADCMediaPool.prototype.file_exists = function file_exists(url) {
    if (lookup(this.media, url) !== "undefined" && lookup(this.media[url], "uuid") !== "undefined") {
      log_trace("ADCMediaPool detecting that asset at url: " + url + " with uuid: " + this.media[url]["uuid"] + " already exists on the device");
      return true;
    }

    log_trace("ADCMediaPool detecting that asset at url: " + url + " does not exist on the device");
    return false;
  };

  ADCMediaPool.prototype.get_path = function get_path(url) {
    if (lookup(this.media, url) !== "undefined" && lookup(this.media[url], "uuid") !== "undefined") {
      return $.device.get_media_path() + this.media[url]["uuid"];
    }

    return "";
  };

  ADCMediaPool.prototype.save_media_file = function save_media_file() {

    var path = $.device.get_data_path() + "media";
    var data = JSON.stringify(this.media);
    acni.save_file(1, path, data, undefined, undefined, function (reply) {
      var success = lookup_boolean(reply, "success");
      if (success) {
        log_info("Media pool file was saved successfully");
      } else {
        log_info("Media pool file was not saved successfully");
      }
    });
  };

  return ADCMediaPool;
})();

var ADCNetworkRequest = (function () {
  function ADCNetworkRequest(dict, completion) {
    var _this10 = this;

    _classCallCheck(this, ADCNetworkRequest);

    this.dict = dict || {};
    this.attempts = lookup_number(dict, "attempts");
    if (this.attempts === -1) {
      this.attempts = 0;
    }
    this.request_type = lookup_string(dict, "type");
    this.url = lookup_string(dict, "url");
    this.next_retry_date = new Date();
    this.guid = "";
    this.is_v4vc = lookup_boolean(dict, "is_v4vc");
    this.is_third_party = lookup_boolean(dict, "is_third_party");
    this.completion = completion;

    if (this.is_third_party) {
      return;
    }

    var id = lookup_string(lookup(this.dict, "content"), "guid");
    if (id === "") {
      acni.uuid(1, 1, function (message_reply) {
        var uuids = lookup_array(message_reply, "uuids");

        if (uuids.length === 0) {
          return;
        }

        _this10.guid = uuids[0];

        if (lookup(_this10.dict, "content") === "undefined") {
          _this10.dict["content"] = {};
        }

        var content = _this10.dict["content"];
        content["guid"] = _this10.guid;
        content["guid_key"] = _this10.guid + _this10.get_guid_key();
        _this10.dict["content"] = JSON.stringify(_this10.dict["content"]);
      });
    } else {
      this.guid = id;

      var content = this.dict["content"];
      content["guid"] = this.guid;
      content["guid_key"] = this.guid + this.get_guid_key();
      this.dict["content"] = JSON.stringify(this.dict["content"]);
    }
  }

  ADCNetworkRequest.prototype.get_dict = function get_dict() {
    this.dict = this.dict || {};
    return this.dict;
  };

  ADCNetworkRequest.prototype.get_dict_for_request = function get_dict_for_request() {
    var _this11 = this;

    var dict = {};

    Object.keys(this.dict).forEach(function (key) {
      if (key !== "is_third_party" && key !== "is_v4vc") {
        dict[key] = _this11.dict[key];
      }
    });

    return dict;
  };

  ADCNetworkRequest.prototype.get_type = function get_type() {
    this.request_type = this.request_type || "";
    return this.request_type;
  };

  ADCNetworkRequest.prototype.get_next_retry_date = function get_next_retry_date() {
    this.next_retry_date = this.next_retry_date || new Date();
    return this.next_retry_date;
  };

  ADCNetworkRequest.prototype.get_url = function get_url() {
    this.url = this.url || "";
    return this.url;
  };

  ADCNetworkRequest.prototype.get_guid = function get_guid() {
    this.guid = this.guid || "";
    return this.guid;
  };

  ADCNetworkRequest.prototype.get_guid_key = function get_guid_key() {
    return "DUBu6wJ27y6xs7VWmNDw67DD";
  };

  ADCNetworkRequest.prototype.get_is_v4vc = function get_is_v4vc() {
    if (typeof this.is_v4vc === "undefined") {
      this.is_v4vc = false;
    }

    return this.is_v4vc;
  };

  ADCNetworkRequest.prototype.get_reward_name = function get_reward_name() {
    var name = lookup(lookup(this.get_dict(), "content"), "reward_name");
    if (name === "undefined") {
      return "";
    }

    return name;
  };

  ADCNetworkRequest.prototype.get_reward_amount = function get_reward_amount() {
    var amount = lookup(lookup(this.get_dict(), "content"), "reward_amount");
    if (amount === "undefined") {
      return "";
    }

    return amount;
  };

  ADCNetworkRequest.prototype.get_is_third_party = function get_is_third_party() {
    if (typeof this.is_third_party === "undefined") {
      this.is_third_party = false;
    }

    return this.is_third_party;
  };

  ADCNetworkRequest.prototype.get_completion = function get_completion() {
    if (typeof this.completion === "undefined") {
      return false;
    }

    return this.completion;
  };

  ADCNetworkRequest.prototype.is_eligible_for_attempt = function is_eligible_for_attempt() {

    if (this.get_guid() === "" && !this.get_is_third_party()) {
      return false;
    }

    if (this.attempts >= 24) {
      var message_id = lookup(this.get_dict(), "m_id");
      log_info("Network request for message with id: " + message_id + " has met the max number of attempts");
      $.network_manager.on_request_report_max_attempts_met(message_id);
      return false;
    }

    var current_date = new Date();
    if (+this.get_next_retry_date() <= +current_date) {
      return true;
    }

    return false;
  };

  ADCNetworkRequest.prototype.update_next_retry_date = function update_next_retry_date() {
    var next_retry = this.get_next_retry_date();
    switch (this.attempts) {
      case 0:
        break;
      case 1:
        next_retry.setSeconds(next_retry.getSeconds() + 2);
        break;
      case 2:
        next_retry.setSeconds(next_retry.getSeconds() + 60);
        break;
      case 3:
        next_retry.setSeconds(next_retry.getSeconds() + 300);
        break;
      case 4:
        next_retry.setSeconds(next_retry.getSeconds() + 1200);
        break;
      default:
        next_retry.setSeconds(next_retry.getSeconds() + 3600);
        break;
    }
  };

  ADCNetworkRequest.prototype.on_started = function on_started() {
    ++this.attempts;
    this.update_next_retry_date();
  };

  return ADCNetworkRequest;
})();

var ADCNetworkRequestLimiter = (function () {
  function ADCNetworkRequestLimiter() {
    _classCallCheck(this, ADCNetworkRequestLimiter);

    this.monitor = {};
  }

  ADCNetworkRequestLimiter.prototype.should_limit = function should_limit(request_type) {
    if (typeof request_type === "undefined") {
      return true;
    }

    var dates = lookup(this.monitor, request_type);
    if (dates === "undefined") {
      this.monitor[request_type] = [];
      this.monitor[request_type].push(new Date());
      return false;
    }

    for (var i = 0; i < dates.length; ++i) {
      var date = dates[i];
      if (!(date instanceof Date)) {
        continue;
      }

      var elapsed = date.getTime() / 1000;
      if (elapsed > 60) {
        dates.splice(i, 1);
        --i;
      }
    }

    if (dates.length > 30) {
      log_info(request_type + " has met the max number of attempts for " + 60 + " seconds");
      return true;
    }

    return false;
  };

  ADCNetworkRequestLimiter.prototype.add_request = function add_request(request_type) {
    var dates = lookup(this.monitor, request_type);
    if (dates === "undefined") {
      this.monitor[request_type] = [];
    }

    this.monitor[request_type].push(new Date());
  };

  return ADCNetworkRequestLimiter;
})();

var ADCNetworkManager = (function () {
  function ADCNetworkManager() {
    var _this12 = this;

    _classCallCheck(this, ADCNetworkManager);

    this.waiting_requests = [];
    this.active_requests = [];
    this.active_request_count = 0;
    this.cached_requests = [];
    this.loaded = false;
    this.limiter = new ADCNetworkRequestLimiter();

    var data_path = $.device.get_data_path();
    acni.file_exists(1, data_path + "network_requests", function (reply) {
      var exists = lookup_boolean(reply, "result");
      if (exists) {
        log_trace("Network request file already exists. Loading into memory");

        acni.load_file(1, data_path + "network_requests", undefined, undefined, undefined, function (reply) {
          var data = lookup_string(reply, "data");
          log_trace("Saved requests: " + data);
          _this12.loaded = true;

          log_info("Parsing cached requests");
          var input = parse_json_with_check(data);
          if (input === false) {
            log_error("Invalid request JSON");
          } else {
            for (var i = 0; i < input.length; ++i) {
              var network_request = input[i];

              network_request["content"] = parse_json_with_check(network_request["content"]);
              network_request = new ADCNetworkRequest(network_request);
              _this12.get_cached_requests().push(network_request);
            }
          }

          _this12.save_requests();
        });
      } else {
        log_trace("Requests file does not already exist. Creating now");

        _this12.loaded = true;
        _this12.save_requests();
      }
    });

    $.message_dispatcher.register_message_handler(function (message) {
      var uuid = lookup_string(message, "uuid");
      if (uuid === "undefined") {
        return;
      }

      var request_config = lookup(message, "request_config");
      if (request_config === "undefined") {
        return;
      }

      _this12.queue_outbound_request(new ADCNetworkRequest(request_config, function (response) {
        acni.on_network_request_complete(uuid, response);
      }), false);
    }, "Controller.queue_network_request");
  }

  ADCNetworkManager.prototype.get_waiting_requests = function get_waiting_requests() {
    this.waiting_requests = this.waiting_requests || [];
    return this.waiting_requests;
  };

  ADCNetworkManager.prototype.get_waiting_requests_count = function get_waiting_requests_count() {
    this.waiting_requests = this.waiting_requests || [];
    return this.waiting_requests.length;
  };

  ADCNetworkManager.prototype.get_active_requests = function get_active_requests() {
    this.active_requests = this.active_requests || [];
    return this.active_requests;
  };

  ADCNetworkManager.prototype.get_active_requests_count = function get_active_requests_count() {
    return this.active_request_count;
  };

  ADCNetworkManager.prototype.get_cached_requests = function get_cached_requests() {
    this.cached_requests = this.cached_requests || [];
    return this.cached_requests;
  };

  ADCNetworkManager.prototype.pump_outbound_messages = function pump_outbound_messages() {
    var _this13 = this;

    var waiting = this.get_waiting_requests();
    var active = this.get_active_requests();

    if (Object.keys(waiting).length === 0) {
      return [];
    }

    if (this.active_request_count === 2) {

      return [];
    }

    var allowed = 2 - this.active_request_count;
    if (allowed > waiting.length) {
      allowed = waiting.length;
    }

    for (var i = 0; i < allowed; ++i) {
      if (waiting.length === 0) {
        break;
      }

      var request = waiting[0];
      if (!request.is_eligible_for_attempt()) {

        break;
      }

      request = waiting.shift();

      active.push(request);
      $.message_dispatcher.queue_outbound_message(request.get_dict_for_request(), function (reply) {
        var active = _this13.get_active_requests();
        var response_code = lookup_number(reply, "status");
        var message_id = lookup_number(reply, "m_id");
        var request = _this13.get_request(active, message_id);
        if (request === null) {
          log_warning("No network request for message id: " + message_id + " was registered");
          return;
        }

        if (response_code >= 200 && response_code <= 399) {
          log_info("Network request with message id: " + message_id + " succeeded");

          if (!request.get_is_third_party()) {
            log_trace("Detecting network request with message id: " + message_id + " is not third party. Need to check status in response body");

            var body = parse_json_with_check(reply["body"]);
            if (body && lookup_string(body, "status") === "success") {
              log_trace("Status for network request with message id: " + message_id + " is success");

              _this13.on_request_complete(reply);
            } else {
              log_trace("Status for network request with message id: " + message_id + " is failure");

              _this13.queue_outbound_request(request, true);
            }
          } else if (request.get_is_third_party() && request.get_is_v4vc()) {

            var body = lookup_string(reply, "body");
            if (body.indexOf("vc_success") !== -1) {
              log_trace("Status for third-party V4VC network request with message id: " + message_id + " is success");

              _this13.on_request_complete({ "m_id": message_id, "status": "success" });
            } else if (body.indexOf("vc_noreward") !== -1 || body.indexOf("vc_decline") !== -1) {
              log_trace("Status for third-party V4VC network request with message id: " + message_id + " is failure w/ valid response.");

              _this13.on_request_complete({ "m_id": message_id, "status": "failure" });
            } else {
              log_trace("Status for third-party V4VC network request with message id: " + message_id + " is failure w/ no valid response.");

              _this13.queue_outbound_request(request, true);
            }
          } else {

            _this13.on_request_complete({ "m_id": message_id, "status": "success" });
          }
        } else if (response_code >= 400 && response_code <= 499 && request.get_type() === "config") {
          log_info("Network request with message id: " + message_id + " was not successful with response code: " + response_code);

          var body = parse_json_with_check(reply["body"]);
          _this13.on_request_complete({ "m_id": message_id, "status": response_code, "reason": lookup(body, "message") });
        } else {
          log_info("Network request with message id: " + message_id + " was not successful with response code: " + response_code);

          _this13.queue_outbound_request(request, true);
        }

        _this13.remove_request(active, message_id);

        --_this13.active_request_count;
        log_trace("Decrementing active network request count to: " + _this13.active_request_count);
      });

      var type = request.get_type();
      var dict = request.get_dict();
      var message_id = dict["m_id"];
      var index = this.get_active_requests().length - 1;
      log_trace("Inserting " + type + " network request with message id: " + message_id + " into active queue at index: " + index);

      request.on_started();

      ++this.active_request_count;

      log_trace("Incrementing active request count to: " + this.active_request_count);
    }
  };

  ADCNetworkManager.prototype.get_request = function get_request(array, id) {
    if (typeof array === "undefined") {
      return;
    }

    for (var i = 0; i < array.length; ++i) {
      if (array[i].get_dict()["m_id"] === id) {
        return array[i];
      }
    }

    return null;
  };

  ADCNetworkManager.prototype.remove_request = function remove_request(array, id) {
    if (typeof array === "undefined") {
      return false;
    }

    for (var i = 0; i < array.length; ++i) {
      if (array[i].get_dict()["m_id"] === id) {
        array.splice(i, 1);
        return true;
      }
    }

    return false;
  };

  ADCNetworkManager.prototype.queue_outbound_request = function queue_outbound_request(request, is_retry) {
    if (typeof request === "undefined" || lookup_string(request, "url") === "") {
      log_warning("Tried to queue an invalid network request. Ignoring");
      return;
    }

    var type = request.get_type();
    if (this.limiter.should_limit(type)) {
      return;
    }

    this.limiter.add_request(type);
    log_info("Queueing network request with message: " + JSON.stringify(request.get_dict()));

    this.insert_prioritized(request);
    if (is_retry) {
      this.save_requests();
      return;
    }

    var cached = this.get_cached_requests();
    if (!request.get_is_v4vc()) {
      cached.push(request);
    }

    if (cached.length > 1000) {
      cached.shift();
    }
  };

  ADCNetworkManager.prototype.insert_prioritized = function insert_prioritized(request) {
    var waiting = this.get_waiting_requests();
    var index_to_insert = 0;
    for (var i = waiting.length - 1; i >= 0; --i) {
      var waiting_request = waiting[i];
      if (+request.get_next_retry_date() >= +waiting_request.get_next_retry_date()) {
        index_to_insert = i + 1;
        break;
      }
    }

    var type = request.get_type();
    var message_id = request.get_dict()["m_id"];
    log_trace("Inserting " + type + " network request with message id: " + message_id + " into waiting queue at index: " + index_to_insert);

    waiting.splice(index_to_insert, 0, request);
  };

  ADCNetworkManager.prototype.save_requests = function save_requests() {

    if (!this.loaded) {
      return;
    }

    var cached_requests = this.get_cached_requests();
    var number_of_requests = cached_requests.length;

    var output = [];
    for (var i = 0; i < number_of_requests; ++i) {

      output.push(cached_requests[i].get_dict());
    }

    var data_path = $.device.get_data_path();
    acni.save_file(1, data_path + "network_requests", JSON.stringify(output), undefined, undefined, function (reply) {
      var success = lookup_boolean(reply, "success");
      if (success) {
        log_trace("ADCNetworkManager successfully saved " + number_of_requests + " network requests to disk");
      } else {
        log_warning("ADCNetworkManager failed to save " + number_of_requests + " network requests to disk");
      }
    });
  };

  ADCNetworkManager.prototype.on_request_complete = function on_request_complete(response) {
    var message_id = lookup_number(response, "m_id");
    var active = this.get_active_requests();
    var request = this.get_request(active, message_id);

    if (request === null) {
      log_warning("No network request was registered with message id: " + message_id);
      return;
    }

    var completion = request.get_completion();
    if (completion) {
      completion(response);
    }

    var success = this.remove_request(this.get_cached_requests(), request.get_dict()["m_id"]);
    if (success) {
      this.save_requests();
    }
  };

  ADCNetworkManager.prototype.on_request_report_max_attempts_met = function on_request_report_max_attempts_met(message_id) {
    var waiting = this.get_waiting_requests();
    for (var i = 0; i < waiting.length; ++i) {
      var request = waiting[i];
      var id = request.get_dict()["m_id"];
      if (id === message_id) {

        this.remove_request(waiting, message_id);
        log_trace("Removed network request with message id: " + message_id + " from set of waiting requests");

        var success = this.remove_request(this.get_cached_requests(), message_id);
        if (success) {
          this.save_requests();
        }

        break;
      }
    }
  };

  return ADCNetworkManager;
})();

var ADCTracking = (function () {
  function ADCTracking(urls, third_party_urls, macros) {
    _classCallCheck(this, ADCTracking);

    this.update_tracking_info(urls, third_party_urls, macros);
  }

  ADCTracking.prototype.get_tracking_urls = function get_tracking_urls() {
    this.urls = this.urls || {};
    return this.urls;
  };

  ADCTracking.prototype.get_third_party_tracking_urls = function get_third_party_tracking_urls() {
    this.third_party_tracking_urls = this.third_party_tracking_urls || {};
    return this.third_party_tracking_urls;
  };

  ADCTracking.prototype.get_macros = function get_macros() {
    this.macros = this.macros || "";
    return this.macros;
  };

  ADCTracking.prototype.get_tracking_url_for_event = function get_tracking_url_for_event(event_type) {

    var event_url = lookup_string(this.urls, event_type);
    if (event_url === "") {
      log_trace("No tracking URL defined for event type: " + event_type);
      return false;
    }

    event_url = this.replace_macros(event_url);
    log_trace("Event type: " + event_type + " assembled tracking URL: " + event_url);

    return event_url;
  };

  ADCTracking.prototype.get_third_party_tracking_urls_for_event = function get_third_party_tracking_urls_for_event(event_type) {

    var urls = lookup_array(this.third_party_tracking_urls, event_type);
    if (urls.length === 0) {
      log_trace("No third-party tracking URLs defined for event type: " + event_type);
      return false;
    }

    var assembled_urls = [];
    for (var i = 0; i < urls.length; ++i) {
      var url = urls[i];
      assembled_urls[i] = this.replace_macros(url);
    }

    log_trace("Event type: " + event_type + " third-party tracking URLs: " + JSON.stringify(assembled_urls));

    return assembled_urls;
  };

  ADCTracking.prototype.replace_macros = function replace_macros(url) {

    var macro_keys = Object.keys(this.macros);
    if (macro_keys.length === 0) {
      return false;
    }

    for (var i = 0; i < macro_keys.length; ++i) {
      var key = macro_keys[i];
      var url_component = lookup_string(this.macros, key);
      if (url_component === "") {
        log_warning("Tracking macro: " + key + " not defined in URL: " + url + ". Cannot replace");
        continue;
      }

      key = "\\{" + key + "\\}";
      var regex = new RegExp(key, "g");
      url = url.replace(regex, url_component);
    }

    return url;
  };

  ADCTracking.prototype.update_tracking_info = function update_tracking_info(urls, third_party_urls, macros) {
    this.urls = urls || {};
    this.third_party_tracking_urls = third_party_urls || {};
    this.macros = macros || {};
  };

  return ADCTracking;
})();

var ADCUserMetadata = (function () {
  function ADCUserMetadata() {
    var _this14 = this;

    _classCallCheck(this, ADCUserMetadata);

    this.user_info = {};
    this.user_interests = {};

    this.last_info_update = null;
    this.last_interests_update = null;

    $.message_dispatcher.register_message_handler(function (message) {
      _this14.update_info(lookup(message, "info"));
    }, "UserMetadata.update_info");

    $.message_dispatcher.register_message_handler(function (message) {
      _this14.update_interests(lookup(message, "info"));
    }, "UserMetadata.update_interests");
  }

  ADCUserMetadata.prototype.update_info = function update_info(info) {
    this.user_info = info;
    this.send_info();
  };

  ADCUserMetadata.prototype.send_info = function send_info() {
    var _this15 = this;

    if (!this.info_eligible_for_update()) {
      return;
    }

    if (Object.keys(this.user_info).length === 0) {
      return;
    }

    var url = $.app.get_app_tracking().get_tracking_url_for_event("user_meta_data");
    if (!url) {
      return;
    }

    log_info("Sending new user info");
    this.user_info["sid"] = $.app.get_session().get_id();
    acni.network_request(1, "user_meta_data", url, false, false, true, false, this.user_info, function (response) {
      _this15.user_info = {};
    });
    this.last_info_update = new Date();
  };

  ADCUserMetadata.prototype.info_eligible_for_update = function info_eligible_for_update() {
    if (this.last_info_update === null) {
      return true;
    }

    var now = new Date();
    var now_seconds = now.getTime() / 1000;
    var last_info_update_seconds = this.get_last_info_update().getTime() / 1000;
    return now_seconds - last_info_update_seconds >= 60;
  };

  ADCUserMetadata.prototype.get_last_info_update = function get_last_info_update() {
    this.last_info_update = this.last_info_update || new Date();
    return this.last_info_update;
  };

  ADCUserMetadata.prototype.update_interests = function update_interests(info) {
    this.user_interests = info;
    this.send_interests();
  };

  ADCUserMetadata.prototype.send_interests = function send_interests() {
    var _this16 = this;

    if (!this.interests_eligible_for_update()) {
      return;
    }

    if (Object.keys(this.user_interests).length === 0) {
      return;
    }

    var url = $.app.get_app_tracking().get_tracking_url_for_event("user_meta_data");
    if (!url) {
      return;
    }

    log_info("Sending new dynamic user interests");
    this.user_interests["sid"] = $.app.get_session().get_id();
    acni.network_request(1, "dynamic_interests", url, false, false, true, false, this.user_info, function (response) {
      _this16.user_interests = {};
    });
    this.last_interests_update = new Date();
  };

  ADCUserMetadata.prototype.interests_eligible_for_update = function interests_eligible_for_update() {
    if (this.last_interests_update === null) {
      return true;
    }

    var now = new Date();
    var now_seconds = now.getTime() / 1000;
    var last_interests_update_seconds = this.get_last_interests_update().getTime() / 1000;
    return now_seconds - last_interests_update_seconds >= 60;
  };

  ADCUserMetadata.prototype.get_last_interests_update = function get_last_interests_update() {
    this.last_interests_update = this.last_interests_update || new Date();
    return this.last_interests_update;
  };

  return ADCUserMetadata;
})();

var ADCApp = (function () {
  function ADCApp(session_id) {
    _classCallCheck(this, ADCApp);

    this.app_id = "";
    this.raw_app_id = "";
    this.zones = {};
    this.log_level = "";
    this.log_screen_overlay = false;
    this.media_pool_size = 0;
    this.cache_network_pass_filter = "";
    this.last_ip = "";
    this.last_country = "";
    this.adc_cap0 = false;
    this.device_type = "";
    this.console_messages = [];
    this.debug1 = "";
    this.debug2 = "";
    this.app_tracking = null;
    this.macros = null;
    this.configured = false;
    this.user_metadata = {};
    this.custom_messages = new ADCCustomMessages();
    this.options = new ADCAppOptions();
    this.ad_controller = new ADCAdController();
    this.app_session = new ADCAppSession(session_id);
    this.app_config = null;
    this.first_parse = true;
    this.from_cache = false;
    this.in_app_browser = null;
    this.last_request_retry = 0;
    this.last_launch_server_probe = new Date().getTime() / 1000;
    this.force_dec = false;
    this.forced_dec_url = "";
    this.has_mraid = false;
    this.mraid_filepath = "";
    this.has_ad_unit = false;
    this.ad_unit_filepath = "";
    this.has_if_ad_unit = false;
    this.if_ad_unit_filepath = "";
  }

  ADCApp.prototype._parse = function _parse(config_response, zone_ids_from_native, cached) {
    var _this17 = this;

    var app = lookup(config_response, "app");
    if (app === "undefined") {
      log_warning("App disabled in configuration. Cannot show ads");

      return false;
    }

    log_trace("zone ids from native: " + JSON.stringify(zone_ids_from_native));

    if (!this.configured && typeof zone_ids_from_native !== "undefined") {
      var invalid_zone_ids = [];
      var zone_ids_from_server = lookup(app, "zones");
      for (var i = 0; i < zone_ids_from_native.length; ++i) {
        var zone_id_from_native = zone_ids_from_native[i];
        var matched_a_zone_id = false;
        for (var j = 0; j < zone_ids_from_server.length; ++j) {
          var zone_config = zone_ids_from_server[j];
          var zone_id_from_server = lookup_string(zone_config, "uuid");
          if (zone_id_from_native === zone_id_from_server) {
            matched_a_zone_id = true;
            break;
          }
        }

        if (!matched_a_zone_id) {
          invalid_zone_ids.push(zone_id_from_native);
        }
      }

      log_trace("Invalid zone ids: " + invalid_zone_ids);
      if (invalid_zone_ids.length > 0) {
        this.notify_native_with_invalid_zone_ids(invalid_zone_ids);
      }
    }

    this.from_cache = typeof cached === "undefined" ? false : cached;

    var tracking_urls = lookup(app, "tracking");
    if (tracking_urls === "undefined") {
      log_error("App tracking URLs not found in app configuration. Cannot show ads");

      return false;
    }

    this.macros = lookup(app, "macros");
    if (this.macros === "undefined") {
      log_error("App tracking macros not found in app configuration. Cannot show ads");

      return false;
    }

    var third_party_tracking_urls = lookup(app, "third_party_tracking");
    if (third_party_tracking_urls === "undefined") {
      log_warning("No third party tracking URLs found in app configuration");
    }

    this.app_tracking = new ADCTracking(tracking_urls, third_party_tracking_urls, this.macros);

    if (this.in_app_browser === null) {
      this.in_app_browser = new ADCBrowser();
      this.in_app_browser.prepare(function (config) {
        log_info("Browser prepared");
        acni.prepare_browser(1, config);
      });
    }

    if (this.first_parse) {
      this.app_session.start();
    }

    this.cache_network_pass_filter = lookup_string(app, "cache_network_pass_filter");
    this.adv_cap0 = lookup_string(app, "adv_cap0");
    this.debug1 = lookup_string(app, "debug1");
    this.debug2 = lookup_string(app, "debug2");
    this.console_messages = lookup_array(app, "console_messages");

    this.app_metadata = lookup(app, "meta");
    this.app_name = lookup_string(this.app_metadata, "name");
    this.raw_app_id = lookup_string(this.app_metadata, "id");

    this.device_metadata = lookup(config_response, "device");
    this.device_type = lookup(this.device_metadata, "type");
    this.media_pool_size = lookup_number(this.device_metadata, "media_pool_size");
    this.ip = lookup_string(this.device_metadata, "ip");
    this.country = lookup_string(this.device_metadata, "last_country");
    this.region = lookup_string(this.device_metadata, "region");
    this.dma = lookup_string(this.device_metadata, "dma");
    this.zip = lookup_string(this.device_metadata, "zip");
    this.lat = lookup_string(this.device_metadata, "lat");
    this._long = lookup_string(this.device_metadata, "long");
    this.user_agent = lookup_string(this.device_metadata, "user_agent");
    this.isp = lookup_string(this.device_metadata, "isp");
    this.cdn = lookup_string(this.device_metadata, "cdn");
    this._type = lookup_string(this.device_metadata, "type");

    this.pub_metadata = lookup(config_response, "pub");
    this.pub_id = lookup_string(this.pub_metadata, "id");

    $.device.device_type = this.device_type;

    if (this.cache_network_pass_filter !== "all" && this.cache_network_pass_filter !== $.device.network_type) {
      log_info("Network type '" + $.device.network_type + "' does not match cache filter.");
      this.first_parse = false;
      return false;
    }

    if (this.first_parse) {
      acni.uuid(1, 3, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        log_info("device media path: " + $.device.get_media_path());
        log_info("device data path: " + $.device.get_data_path());

        if ($.asset_manager.file_exists("https://s3.amazonaws.com/adc3/AdUnit/ADCAdUnit.js")) {
          _this17.has_ad_unit = true;
        } else {
          log_trace("Detecting that ad unit source file is not present");
          var uuid = uuids[1];
          var ad_unit_filepath = $.device.get_data_path() + uuid;
          acni.download(1, "https://s3.amazonaws.com/adc3/AdUnit/ADCAdUnit.js", uuid, ad_unit_filepath, undefined, undefined, undefined, function (url) {
            log_info("owain: download complete");
            _this17.has_ad_unit = true;
          });
        }

        if ($.asset_manager.file_exists("https://s3.amazonaws.com/adc3/IFAdUnit/ADCInstantFeedAdUnit.js")) {
          _this17.has_if_ad_unit = true;
        } else {
          log_trace("Detecting that IF ad unit source file is not present");
          var uuid = uuids[2];
          var if_ad_unit_filepath = $.device.get_data_path() + uuid;
          acni.download(1, "https://s3.amazonaws.com/adc3/IFAdUnit/ADCInstantFeedAdUnit.js", uuid, if_ad_unit_filepath, undefined, undefined, undefined, function (url) {
            log_info("owain: download complete");
            _this17.has_if_ad_unit = true;
          });
        }
      });
    }

    var new_zones = lookup(app, "zones");
    if (new_zones === "undefined") {
      this.first_parse = false;
      return false;
    }

    for (var i = 0; i < new_zones.length; ++i) {
      var zone_config = new_zones[i];
      var zone_id = lookup_string(zone_config, "uuid");

      log_info("Parsing zone with id: " + zone_id);

      if (!this.zones.hasOwnProperty(zone_id)) {
        this.zones[zone_id] = new ADCZone();
      }
      this.zones[zone_id]._parse(zone_config);
    }

    log_trace("Log level: " + this.log_level);
    log_trace("Log screen overlay: " + this.log_screen_overlay);
    log_trace("Media pool size: " + this.media_pool_size);
    log_trace("Cache network pass filter: " + this.cache_network_pass_filter);
    log_trace("Last ip: " + this.last_ip);
    log_trace("Last country: " + this.last_country);
    log_trace("Adv cap0: " + this.adv_cap0);
    log_trace("Debug1: " + this.debug1);
    log_trace("Debug2: " + this.debug2);
    log_trace("Device type: " + this.device_type);
    log_trace("Console messages: " + JSON.stringify(this.console_messages));
    log_trace("Tracking URLs: " + JSON.stringify(this.app_tracking.get_tracking_urls()));
    log_trace("Third party tracking URLs: " + JSON.stringify(this.app_tracking.get_third_party_tracking_urls()));

    if (!this.configured) {

      acni.on_configured(1, $.app.get_session().get_id());
    }

    this.configured = true;
    this.first_parse = false;
    this.from_cache = false;

    $.message_dispatcher.register_message_handler(function (message) {
      var url = _this17.app_tracking.get_tracking_url_for_event("update");
      if (!url) {
        log_trace("No tracking URL defined for app updates");
      } else {
        var payload = {
          "app_bundle_info": lookup(message, "app_bundle_info")
        };
        acni.network_request(1, "update", url, false, false, true, false, payload);
      }
    }, "AdColony.on_update");

    return true;
  };

  ADCApp.prototype.request_app_info = function request_app_info(completion_handler) {
    var _this18 = this;

    acni.get_native_app_info(1, function (reply) {
      var options = lookup(reply, "options");
      if (options === "undefined") {
        log_info("Options table not present. Ignoring");
        return;
      }

      var app_id = lookup_string(options, "app_id");
      if (app_id === "") {
        log_info("App id not present. Ignoring");
        return;
      }
      _this18.app_id = app_id;

      var zone_ids = lookup_array(options, "zone_ids");
      if (zone_ids.length === 0) {
        log_info("Zone ids not present. Ignoring");
        return;
      }

      var zones_to_refresh = [];
      for (var i = 0; i < zone_ids.length; ++i) {

        if (typeof _this18.zones[zone_ids[i]] === "undefined") {
          _this18.zones[zone_ids[i]] = new ADCZone();
        }
        if (_this18.zone_needs_refresh(zone_ids[i]) || typeof _this18.zones[zone_ids[i]].last_parse === "undefined") {
          zones_to_refresh.push(zone_ids[i]);
        }
      }

      var info = $.device.get_info_for_config();
      info["app_id"] = _this18.app_id;
      info["zones"] = zones_to_refresh;
      info["ad_history"] = $.app.get_session().get_ad_history();
      info["ad_playing"] = $.app.get_session().get_ad_playing();
      info["ad_queue"] = $.app.get_session().get_ad_queue();
      info["sid"] = $.app.get_session().get_id();
      info["s_imp_count"] = $.app.get_session().get_impression_count();
      if ($.device.get_os_name().toLowerCase() === "iOS".toLowerCase()) {
        info["bundle_id"] = lookup_string(options, "bundle_id");
        info["bundle_version"] = lookup_string(options, "bundle_version");
        info["bundle_version_short"] = lookup_string(options, "bundle_version_short");
      }

      log_info("Native app info received. Requesting app configuration from ad server");
      log_trace("App info: " + JSON.stringify(info));

      if (typeof completion_handler !== "undefined") {
        completion_handler(info);
      }
    });
  };

  ADCApp.prototype.configure = function configure(app_info, cached_response) {
    if (this.app_config === null) {
      this.app_config = new ADCAppConfiguration();
    }

    log_info("App info: " + JSON.stringify(app_info));
    log_info("Cached info: " + JSON.stringify(cached_response));

    app_info["user_metadata"] = this.get_user_metadata();

    this.app_config.configure(app_info, cached_response);
  };

  ADCApp.prototype.get_configured = function get_configured() {
    return this.configured;
  };

  ADCApp.prototype.get_device_type = function get_device_type() {
    this.device_type = this.device_type || "";
    return this.device_type;
  };

  ADCApp.prototype.get_media_pool_size = function get_media_pool_size() {
    this.media_pool_size = this.media_pool_size || -1;
    return this.media_pool_size;
  };

  ADCApp.prototype.get_app_tracking = function get_app_tracking() {
    this.app_tracking = this.app_tracking || new ADCTracking();
    return this.app_tracking;
  };

  ADCApp.prototype.get_tracking_macros = function get_tracking_macros() {
    this.macros = this.macros || {};
    return this.macros;
  };

  ADCApp.prototype.get_session = function get_session() {
    this.app_session = this.app_session || new ADCAppSession();
    return this.app_session;
  };

  ADCApp.prototype.get_user_metadata = function get_user_metadata() {
    this.user_metadata = this.user_metadata || {};
    return this.user_metadata;
  };

  ADCApp.prototype.get_app_id = function get_app_id() {
    this.app_id = this.app_id || "";
    return this.app_id;
  };

  ADCApp.prototype.get_has_mraid = function get_has_mraid() {
    return this.has_mraid;
  };

  ADCApp.prototype.get_mraid_filepath = function get_mraid_filepath() {
    return $.device.get_data_path() + $.asset_manager.get_uuid_for_file("https://s3.amazonaws.com/adc3/MRAID/MRAID.js");
  };

  ADCApp.prototype.get_has_ad_unit = function get_has_ad_unit() {
    return this.has_ad_unit;
  };

  ADCApp.prototype.get_ad_unit_filepath = function get_ad_unit_filepath() {
    return $.device.get_data_path() + $.asset_manager.get_uuid_for_file("https://s3.amazonaws.com/adc3/AdUnit/ADCAdUnit.js");
  };

  ADCApp.prototype.get_has_if_ad_unit = function get_has_if_ad_unit() {
    return this.has_if_ad_unit;
  };

  ADCApp.prototype.get_if_ad_unit_filepath = function get_if_ad_unit_filepath() {
    return $.device.get_data_path() + $.asset_manager.get_uuid_for_file("https://s3.amazonaws.com/adc3/IFAdUnit/ADCInstantFeedAdUnit.js");
  };

  ADCApp.prototype.set_user_metadata = function set_user_metadata(user_metadata) {
    log_info("ADCApp setting new user metadata: " + JSON.stringify(user_metadata));
    this.user_metadata = user_metadata || {};
  };

  ADCApp.prototype.set_has_mraid = function set_has_mraid(has_mraid) {
    this.has_mraid = has_mraid;
  };

  ADCApp.prototype.update = function update() {
    this.app_session.update();

    var message = [];

    if (this.app_config !== null) {
      this.app_config.update();
    }

    this.ad_controller.expiration_check();

    var time = new Date().getTime() / 1000;

    if (time - this.last_request_retry > 1) {
      for (var key in this.ad_controller.delayed_requests) {
        if (!this.ad_controller.delayed_requests.hasOwnProperty(key)) {
          continue;
        }

        message = this.ad_controller.delayed_requests[key];
        this.ad_controller.on_request(this.ad_controller.delayed_requests[key]);
      }
      this.last_request_retry = new Date().getTime() / 1000;
    }

    if (time - this.last_launch_server_probe > 300) {
      $.message_dispatcher.queue_outbound_message({
        "m_type": "AdColony.probe_launch_server",
        "m_origin": 1,
        "m_target": 0
      });

      this.last_launch_server_probe = time;
    }
  };

  ADCApp.prototype.on_pause = function on_pause() {
    var zone_ids = Object.keys(this.zones);
    for (var i = 0; i < zone_ids.length; ++i) {
      var zone_id = zone_ids[i];
      var zone = this.zones[zone_id];
      zone.on_pause();
    }
  };

  ADCApp.prototype.on_resume = function on_resume() {
    var zone_ids = Object.keys(this.zones);
    for (var i = 0; i < zone_ids.length; ++i) {
      var zone_id = zone_ids[i];
      var zone = this.zones[zone_id];
      zone.on_resume();
    }
  };

  ADCApp.prototype.notify_native_with_invalid_zone_ids = function notify_native_with_invalid_zone_ids(invalid_zone_ids) {
    for (var i = 0; i < invalid_zone_ids.length; ++i) {
      acni.zone_info(1, invalid_zone_ids[i], undefined, 3, 1, $.app.get_session().get_id());
    }
  };

  ADCApp.prototype.zone_needs_refresh = function zone_needs_refresh(zone_id) {
    var valid_count = 0;
    var zone = lookup(this.zones, zone_id);

    if (zone === "undefined" || typeof zone.ads === "undefined") {
      log_info("No previous config for zone " + zone_id);
      return true;
    }

    for (var i = 0; i < zone.ads.length; ++i) {
      if (!zone.ads[i].is_served() && !zone.ads[i].is_expired()) {
        valid_count++;
      }
    }

    if (valid_count < zone.min_ad_thresh || Math.floor(new Date().getTime() / 1000) - zone.last_parse > zone.max_config_win) {
      log_info("Valid ads < min ad thresh or max config win has been hit for zone " + zone_id);
      return true;
    }

    return false;
  };

  ADCApp.prototype.on_session_reset = function on_session_reset() {

    for (var zone_id in Object.keys(this.zones)) {
      var zone = lookup(this.zones, zone_id);
      if (zone !== "undefined") {
        this.get_session().get_ad_history()[zone_id] = [];
      }
    }
  };

  ADCApp.prototype.flush_ad_queue = function flush_ad_queue() {
    var zone_ids = Object.keys(this.zones);
    for (var i = 0; i < zone_ids.length; ++i) {
      var zone = lookup(this.zones, zone_ids[i]);
      if (zone === "undefined") {
        continue;
      }

      zone.invalidate_ads();
    }

    this.get_session().on_ads_invalidated();
  };

  ADCApp.prototype.force_dec_url = function force_dec_url(url) {
    log_trace("ADCApp forcing dec url: " + url);

    this.force_dec = true;
    this.forced_dec_url = url;

    if ($.device.get_os_name().toLowerCase() === "iOS".toLowerCase()) {
      this.flush_ad_queue();
    }
  };

  ADCApp.prototype.should_force_dec_url = function should_force_dec_url() {
    return this.force_dec;
  };

  ADCApp.prototype.get_forced_dec_url = function get_forced_dec_url() {
    return this.forced_dec_url;
  };

  return ADCApp;
})();

var ADCAppConfiguration = (function () {
  function ADCAppConfiguration() {
    _classCallCheck(this, ADCAppConfiguration);

    this.last_config = 0;
    this.first_config = true;
    this.app_info = null;
    this.config_block = false;
    this.allow_multiple_configures = false;

    this.config_response = null;

    if ($.device.sdk_type === "ios_native") {
      this.config_url = "https://iosads24.adcolony.com/configure";
    } else {
      this.config_url = "https://androidads30.adcolony.com/configure";
    }
  }

  ADCAppConfiguration.prototype.update = function update() {
    if (Math.floor(new Date().getTime() / 1000) - this.last_config < 1 || this.config_block || !$.app.get_configured()) {
      return;
    }

    var zones_for_config = [];
    for (var key in $.app.zones) {
      var zone = $.app.zones[key];
      var current_time = Math.floor(new Date().getTime() / 1000);
      if (current_time - zone.last_parse > zone.min_config_win && $.app.zone_needs_refresh(key) || current_time - zone.last_parse > zone.max_config_win) {
        zones_for_config.push(key);
      }
    }
    if (zones_for_config.length === 0) {
      return;
    }

    this.config_block = true;

    log_info("Contacting ad server");
    log_trace("Reconfiguring with zones: " + zones_for_config);

    this.app_info["zones"] = zones_for_config;
    this.app_info["user_id"] = $.device.get_user_id();
    this.configure();
    this.last_config = Math.floor(new Date().getTime() / 1000);
  };

  ADCAppConfiguration.prototype.configure = function configure(app_info, cached_response) {
    var _this19 = this;

    if (typeof app_info !== "undefined") {
      this.app_info = app_info;
    }

    var options = lookup(app_info, "options");
    if (options !== "undefined") {
      this.allow_multiple_configures = lookup_boolean(options, "reconfigurable");
    }

    if (cached_response !== "" && typeof cached_response !== "undefined" && !this.allow_multiple_configures) {
      this.config_response = cached_response;
    }

    if (this.allow_multiple_configures) {
      acni.delete_file(1, $.device.get_data_path() + "config.json");
    }

    log_info("Configure with info: " + JSON.stringify(this.app_info));
    acni.network_request(1, "config", this.config_url, false, false, true, false, this.app_info, function (response) {

      var config_status = lookup(response, "status");
      if (config_status < 200 || config_status > 299) {
        log_warning("App configuration was not successful. Response: " + JSON.stringify(response));
        if (lookup_string(response, "reason") === "requirement failed: Not a valid app") {
          log_error_public("Tried to configure AdColony with an invalid app ID: " + $.app.get_app_id());
          acni.disable_adcolony(1);
        }
        _this19.config_block = true;
        return;
      }

      var config_response = lookup(response, "body");
      if (config_response === "undefined") {
        log_warning("Communication with ad server failed with response code: " + lookup(response, "status"));
        return;
      }

      var parsed_config_response = parse_json_with_check(config_response);
      if (!parsed_config_response) {
        log_warning("Failed to parse config response body: " + config_response);
        return;
      }
      config_response = parsed_config_response;

      _this19.config_block = false;

      log_info("App configuration succeeded! Saving and parsing app info.");
      $.app._parse(config_response, lookup(_this19.app_info, "zones"));

      var zone_ids = Object.keys($.app.zones);
      for (var i = 0; i < zone_ids.length; ++i) {
        var zone = $.app.zones[zone_ids[i]];
        if ($.device.get_os_name() === "android") {
          zone.send_custom_message_zone_info(zone.get_uuid(), zone._type);
        }
      }

      _this19.last_config = Math.floor(new Date().getTime() / 1000);
      _this19.merge_response(config_response);
      _this19.save_response();
    });
  };

  ADCAppConfiguration.prototype.remove_from_response = function remove_from_response(ad_id, zone_id) {

    if (this.config_response !== null) {
      var app = lookup(this.config_response, "app");
      var zones = lookup(app, "zones");
      for (var i = 0; i < zones.length; ++i) {

        if (lookup(zones[i], "uuid") === zone_id) {

          var ads = lookup(zones[i], "ads");
          if (ads !== "undefined") {
            for (var j = 0; j < ads.length; j++) {
              var ad = lookup(ads[j], "legacy");
              if (ad !== "undefined" && lookup(ad, "uuid") === ad_id) {

                ads.splice(j, 1);
                zones[i]["ads"] = ads;
                log_info("Removing ad with uuid" + ad_id + " from cached response");
                break;
              }
            }
          }
        }
      }
      this.config_response["app"]["zones"] = zones;
      this.save_response();
    }
  };

  ADCAppConfiguration.prototype.merge_response = function merge_response(config_response) {
    if (this.config_response !== null) {
      var old_app = lookup(this.config_response, "app");
      var new_app = lookup(config_response, "app");

      if (old_app !== "undefined" && new_app !== "undefined") {
        var old_zones = lookup_array(old_app, "zones");
        var new_zones = lookup_array(new_app, "zones");

        if (old_app === "undefined" || new_app === "undefined") {
          return;
        }

        for (var i = 0; i < old_zones.length; ++i) {
          var missing_zone = true;
          for (var j = 0; j < new_zones.length; ++j) {
            if (lookup(old_zones[i], "uuid") === lookup(new_zones[j], "uuid")) {
              missing_zone = false;
            }
          }
          if (missing_zone) {

            new_zones.push(old_zones[i]);
          } else {

            var old_ads = lookup_array(old_zones[i], "ads");
            for (var j = 0; j < new_zones.length; ++j) {
              var new_ads = lookup_array(new_zones[j], "ads");
              if (lookup(old_zones[i], "uuid") === lookup(new_zones[j], "uuid")) {

                for (var k = 0; k < old_ads.length; ++k) {
                  new_ads.push(old_ads[k]);
                }
              }

              new_zones[j]["ads"] = new_ads;
            }
          }
        }

        config_response["app"]["zones"] = new_zones;
      }
    }
    this.config_response = config_response;
  };

  ADCAppConfiguration.prototype.save_response = function save_response() {
    var filepath = $.device.get_data_path() + "config.json";
    var data = JSON.stringify(this.config_response);

    if (parse_json_with_check(data) !== false) {
      acni.save_file(1, filepath, data, undefined, undefined, function (reply) {
        log_trace("FileSystem.save for config response success: " + lookup_boolean(reply, "success"));
      });
    }
  };

  ADCAppConfiguration.prototype.get_config_url = function get_config_url() {
    this.config_url = this.config_url || "";
    return this.config_url;
  };

  return ADCAppConfiguration;
})();

var ADCZone = (function () {
  function ADCZone() {
    _classCallCheck(this, ADCZone);

    this.ads = [];
    this.enabled = false;
    this.request_fail_reason = 0;
    this.rewarded = false;
  }

  ADCZone.prototype._parse = function _parse(zone_config) {
    this.active = lookup_boolean(zone_config, "active");
    this.play_interval = lookup_number(zone_config, "play_interval");
    this.min_ad_thresh = lookup_number(zone_config, "min_ad_thresh");
    this.uuid = lookup_string(zone_config, "uuid");
    this.play_order = lookup(zone_config, "play_order");
    this.clear_ad_queue = lookup_boolean(zone_config, "clear_ad_queue");
    this.min_config_win = lookup_default(zone_config, "min_config_win", 60);
    this.max_config_win = lookup_default(zone_config, "max_config_win", 3600);
    this.ipx_request = lookup(zone_config, "ipx_request");
    this.type_string = lookup_string(zone_config, "zone_type");
    this._status = this.get_status();
    this.last_parse = Math.floor(new Date().getTime() / 1000);

    var ad_history = lookup($.app.get_session().get_ad_history(), this.uuid);
    if (ad_history === "undefined") {
      $.app.get_session().get_ad_history()[this.uuid] = [];
    }

    var ad_playing = lookup($.app.get_session().get_ad_playing(), this.uuid);
    if (ad_playing === "undefined") {
      $.app.get_session().get_ad_playing()[this.uuid] = [];
    }

    var ad_queue = lookup($.app.get_session().get_ad_queue(), this.uuid);
    if (ad_queue === "undefined") {
      $.app.get_session().get_ad_queue()[this.uuid] = [];
    }

    switch (this.type_string) {
      case "interstitial":
        this._type = 0;
        break;
      case "v4vc":
        this._type = 0;
        this.rewarded = true;
        break;
      case "instant_feed":
        this._type = 2;
        break;
      default:
        log_error("Ad server error: no zone type sent in response.");
        return;
    }

    if (this.clear_ad_queue) {
      this.invalidate_ads();
    }

    var new_ads = lookup(zone_config, "ads");
    if (new_ads === "undefined") {
      log_trace("No new ads in config for zone " + this.uuid);
    } else {

      for (var i = 0; i < new_ads.length; ++i) {
        var ad_config = lookup(new_ads, i);
        if (ad_config.legacy) {
          ad_config = lookup(ad_config, "legacy");
          ad_config.adunit_type = 0;
        } else {
          ad_config = lookup(ad_config, "aurora");
          ad_config.adunit_type = 1;
        }

        var ad = new ADCAd(this.uuid);
        ad._parse(ad_config);
        ad.rewarded = this.rewarded;
        ad._type = this._type;
        this.ads.push(ad);
      }
    }

    this.v4vc = new ADCZoneV4VC();
    var maybe_v4vc = lookup(zone_config, "v4vc");
    if (maybe_v4vc !== "undefined") {
      this.v4vc._parse(maybe_v4vc);
    }

    var tracking = lookup(zone_config, "tracking");
    if (tracking !== "undefined") {
      var macros = $.app.get_tracking_macros();
      this.tracking = new ADCTracking(tracking, null, macros);
    }

    log_trace("Zone enabled: " + this.enabled);
    log_trace("Zone active: " + this.active);
    log_trace("Zone play interval: " + this.play_interval);
    log_trace("Zone min ad thresh: " + this.min_ad_thresh);
    log_trace("Zone uuid: " + this.uuid);
    log_trace("Zone play order: " + JSON.stringify(this.play_order));
    log_trace("Zone tracking: " + JSON.stringify(this.tracking));
    log_trace("Zone clear ad queue: " + this.clear_ad_queue);
    log_trace("Zone min config win: " + this.min_config_win);
    log_trace("Zone max config win: " + this.max_config_win);
    log_trace("Zone ipx request: " + this.ipx_request);

    this.enabled = true;
    this.check_zone_status(true);
  };

  ADCZone.prototype.invalidate_ads = function invalidate_ads() {
    log_info("Invalidating ads in zone: " + this.uuid);

    for (var i = 0; i < this.ads.length; ++i) {
      var ad = this.ads[i];
      ad.invalidate();
      log_info("Invalidated ad with id: " + ad.get_uuid());
    }

    this.check_zone_status(false);
  };

  ADCZone.prototype.send_custom_message_zone_info = function send_custom_message_zone_info(zone_id, zone_type) {
    acni.send_custom_message(1, "custom_zone_type", zone_id + "|" + zone_type);
  };

  ADCZone.prototype.check_zone_status = function check_zone_status(from_parse) {
    if (!this.enabled) {
      return;
    }

    from_parse = from_parse || false;
    var new_status = this.get_status();

    if (this._status !== new_status || from_parse) {
      this._status = new_status;

      log_trace("Sending AdColony.zone_info message - status = " + this._status + ", type = " + this._type);

      var reward = {};
      if (this.v4vc.enabled) {
        reward = this.v4vc.get_dict();
      }

      acni.zone_info(1, this.uuid, reward, this._type, this._status, $.app.get_session().get_id(), this.rewarded);
    }
  };

  ADCZone.prototype.get_status = function get_status() {
    var current_ad = this.current_ad();

    if (current_ad !== "undefined") {
      return 0;
    }

    if (!this.enabled) {
      return 4;
    }

    for (var i = 0; i < this.ads.length; ++i) {
      var ad = this.ads[i];
      if (ad !== "undefined" && !ad.is_expired()) {
        return 2;
      }
    }

    return 3;
  };

  ADCZone.prototype.current_ad = function current_ad() {

    for (var i = 0; i < this.ads.length; ++i) {
      var ad = this.ads[i];
      if (ad !== "undefined" && ad.components_ready() && ad.network_match()) {
        if (!ad.removed && ad.is_expired()) {

          --i;
        } else if (!ad.is_expired() && !ad.is_served()) {
          log_info("Returning current ad with uuid = " + ad.uuid);
          this.request_fail_reason = 0;
          return ad;
        }
      }
    }

    this.request_fail_reason = 5;
    return "undefined";
  };

  ADCZone.prototype.get_v4vc = function get_v4vc() {
    this.v4vc = this.v4vc || "undefined";
    return this.v4vc;
  };

  ADCZone.prototype.get_uuid = function get_uuid() {
    this.uuid = this.uuid || "undefined";
    return this.uuid;
  };

  ADCZone.prototype.get_request_fail_reason = function get_request_fail_reason() {
    return this.request_fail_reason;
  };

  ADCZone.prototype.get_tracking = function get_tracking() {
    this.tracking = this.tracking || new ADCTracking([]);
    return this.tracking;
  };

  ADCZone.prototype.get_ads = function get_ads() {
    this.ads = this.ads || [];
    return this.ads;
  };

  ADCZone.prototype.is_rewarded = function is_rewarded() {
    return this.rewarded;
  };

  return ADCZone;
})();

var ADCAd = (function () {
  function ADCAd(zone_id) {
    _classCallCheck(this, ADCAd);

    this.zone_id = zone_id;
    this.ad_components = [];
    this.ad_unit_asset_uuid = "";
    this.is_native = false;
    this.removed = false;
    this.served = false;
    this.rewarded = false;
    this._type = 0;
  }

  ADCAd.prototype._parse = function _parse(ad) {
    this.expired = false;
    this.playing = false;
    this.served = false;
    this.invalidated = false;

    this.uuid = lookup_string(ad, "uuid");
    log_info("Parsing ad with uuid = " + this.uuid);

    this.fullscreen = lookup_boolean(ad, "fullscreen");
    this.enable_in_app_store = lookup_boolean(ad, "enable_in_app_store");
    this.video_events_on_replays = lookup_default(ad, "video_events_on_replays", true);
    this.ad_id = lookup_string(ad, "ad_id");
    this._title = lookup_string(ad, "title");
    this.expires = lookup_number(ad, "expires");
    this.cpcv_bid = lookup_number(ad, "cpcv_bid");
    this.net_earnings = lookup_number(ad, "net_earnings");
    this.view_network_pass_filter = lookup_default(ad, "view_network_pass_filter", "all");
    this.played = false;
    this.last_parse = Math.floor(new Date().getTime() / 1000);

    this.adunit_type = lookup_number(ad, "adunit_type");

    if ($.app.get_session().get_ad_queue()[this.zone_id].indexOf(this.uuid) === -1) {
      $.app.get_session().get_ad_queue()[this.zone_id].push(this.uuid);
    }

    var meta = lookup_default(ad, "meta", {});
    if (Object.keys(meta).length !== 0) {
      this.group_id = lookup_number(meta, "group_id");
      this.group_name = lookup_string(meta, "group_name");
      this.campaign_id = lookup_number(meta, "campaign_id");
      this.campaign_name = lookup_string(meta, "campaign_name");
      this.creative_id = lookup_number(meta, "creative_id");
      this.creative_name = lookup_string(meta, "creative_name");
    }

    this.v4iap = lookup_default(ad, "v4iap", {});

    if (this.adunit_type == 0) {
      this.parse_legacy(ad);
    } else {
      this.parse_aurora(ad);
    }

    log_trace("Ad uuid: " + this.uuid);
    log_trace("Ad fullscreen: " + this.fullscreen);
    log_trace("Ad enable in-app store: " + this.enable_in_app_store);
    log_trace("Ad video events on replays: " + this.video_events_on_replays);
    log_trace("Ad ad id: " + this.ad_id);
    log_trace("Ad group id: " + this.ad_group_id);
    log_trace("Ad campaign id: " + this.ad_campaign_id);
    log_trace("Ad title: " + this._title);
    log_trace("Ad expires: " + this.expires);
    log_trace("Ad cpcv bid: " + this.cpcv_bid);
    log_trace("Ad net earnings: " + this.net_earnings);
    log_trace("Ad view network pass filter: " + this.view_network_pass_filter);
  };

  ADCAd.prototype.parse_legacy = function parse_legacy(ad) {

    this.video = new ADCVideo(this.zone_id);
    var video_lookup = lookup(ad, "video");
    if (video_lookup !== "undefined") {
      this.video._parse(video_lookup);
      this.ad_components.push(this.video);
    }

    this.ad_v4vc = new ADCAdV4VC(this.zone_id);
    var ad_v4vc_lookup = lookup(ad, "v4vc");
    if (ad_v4vc_lookup !== "undefined") {
      this.ad_v4vc._parse(ad_v4vc_lookup);
    }

    this.in_app_browser = new ADCInAppBrowser(this.zone_id);
    var in_app_browser_lookup = lookup(ad, "in_app_browser");
    if (in_app_browser_lookup !== "undefined") {
      this.in_app_browser._parse(in_app_browser_lookup);
      this.ad_components.push(this.in_app_browser);
    }

    this.dec = new ADCDEC(this.zone_id);
    var dec = lookup(ad, "companion_ad");
    if (dec !== "undefined") {
      this.dec._parse(dec);
      this.ad_components.push(this.dec);
    }

    this._native = new ADCNative(this.zone_id);
    var native_lookup = lookup(ad, "native");
    if (native_lookup !== "undefined") {
      this._native._parse(native_lookup);
      this.ad_components.push(this._native);
      this.is_native = true;
    }

    var macros = $.app.get_tracking_macros();
    if (Object.keys(macros).length !== 0) {
      var urls = lookup(ad, "ad_tracking");
      var third_party_urls = lookup(ad, "third_party_tracking");

      this.tracking = new ADCTracking(urls, third_party_urls, macros);
    }
  };

  ADCAd.prototype.parse_aurora = function parse_aurora(ad) {
    var _this20 = this;

    acni.get(1, ad.manifest, true, false, function (reply) {
      var url = lookup_string(reply, "url");
      var success = lookup_boolean(reply, "success");
      if (!success) {
        log_info("WebServices.get" + " for url: " + url + " failed");
        return;
      }

      var status_code = lookup_number(reply, "status");
      if (status_code < 200 || status_code > 399) {
        log_info("WebServices.get" + " for url: " + url + " failed with invalid status code: " + status_code);
        return;
      }

      try {
        _this20.manifest = JSON.parse(reply.body);
      } catch (e) {
        log_error("Failed to parse ad unit manifest JSON at url: " + url);
        return;
      }

      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length == 0) {
          return;
        }

        var uuid = uuids[0];

        var bundle_path = $.device.get_temp_storage_path() + uuid;
        var filepath = $.device.get_media_path();

        var assets = [];
        var hashes = [];
        for (var i = 0; i < _this20.manifest.assets.length; ++i) {
          var curr_asset = _this20.manifest.assets[i];
          var curr_hash = curr_asset.split('.')[0];

          if (!$.asset_manager.file_exists(curr_asset)) {
            var in_flight = false;
            var wdl = $.asset_manager.waiting_downloads;
            var adl = $.asset_manager.active_downloads;

            for (var _i = 0; _i < wdl.length; ++_i) {
              if (wdl[_i].url.indexOf(curr_hash) >= 0) {
                in_flight = true;
              }
            }

            for (var _i2 = 0; _i2 < adl.length; ++_i2) {
              if (adl[_i2].url.indexOf(curr_hash) >= 0) {
                in_flight = true;
              }
            }

            if (!in_flight) {
              assets.push(curr_asset);
              hashes.push(curr_hash);
            }
          }

          var component = new ADCBundleAsset(_this20.zone_id);
          component._parse(_this20.manifest, i);
          _this20.ad_components.push(component);
        }

        if (assets.length > 0) {
          var bundle_url = "https://alpha-assets.adcolony.com/pull/" + hashes.join(',');

          var download_msg = {
            "m_type": "WebServices.download",
            "m_origin": 1,
            "m_target": 0,
            "url": bundle_url,
            "filepath": bundle_path
          };

          $.asset_manager.queue_outbound_download(new ADCAssetDownload(download_msg, uuid, function (url) {
            $.message_dispatcher.queue_outbound_message({
              "m_type": "FileSystem.unpack_bundle",
              "m_origin": 1,
              "m_target": 0,
              "ad_session_id": _this20.ad_session_id,
              "filepath": filepath,
              "bundle_path": bundle_path,
              "bundle_filenames": assets
            }, function (message_reply) {
              var success = lookup_boolean(message_reply, "success");
              if (!success) {
                log_info("FileSystem.unpack_bundle" + " for url: " + url + " failed");
                return;
              }

              log_info("FileSystem.unpack_bundle" + " for url: " + url + " succeeded");

              var sizes = lookup_array(message_reply, "file_sizes");
              for (var i = 0; i < assets.length; ++i) {
                var curr_asset = assets[i];
                $.asset_manager.media_pool.add_file(curr_asset, curr_asset, sizes[i]);
                _this20.ad_components[i].on_ready();
              }
            });
          }, true));
        }
      });
    });
  };

  ADCAd.prototype.set_module_id = function set_module_id(module_id) {
    this.module_id = module_id;
  };

  ADCAd.prototype.set_ad_session_id = function set_ad_session_id(ad_session_id) {
    if (typeof ad_session_id === "undefined") {
      this.ad_session_id = "";
      return;
    }

    this.ad_session_id = ad_session_id;
  };

  ADCAd.prototype.set_playing = function set_playing(playing) {
    this.playing = playing;
  };

  ADCAd.prototype.set_played = function set_played(played) {
    if (typeof played === "undefined") {
      this.played = false;
      return;
    }

    this.played = played;

    if (played) {
      var ad_queue = $.app.get_session().get_ad_queue()[this.zone_id];
      ad_queue.splice(ad_queue.indexOf(this.uuid), 1);
    }
  };

  ADCAd.prototype.serve = function serve() {
    this.served = true;
  };

  ADCAd.prototype.remove = function remove(is_ad_view) {

    if (this.removed) {
      return;
    }

    if (this.adunit_type == 0) {
      $.asset_manager.set_removable(this.get_dec_base_url(), true);
      $.asset_manager.set_removable(this.get_video_url(), true);
      $.asset_manager.set_removable(this.get_haptic_url(), true);
      $.asset_manager.set_removable(this.get_image_overlay_url(), true);

      if (is_ad_view) {
        $.asset_manager.set_removable(this.get_native().get_poster().get_url(), true);
        $.asset_manager.set_removable(this.get_native().get_thumb().get_url(), true);
      }
    } else {
      for (var _i3 = 0; _i3 < this.ad_components.length; ++_i3) {
        $.asset_manager.set_removable(this.ad_components[_i3].asset_id, true);
      }
    }

    $.app.app_config.remove_from_response(this.uuid, this.zone_id);

    var zone = lookup($.app.zones, this.zone_id);
    if (zone !== "undefined") {
      for (var i = 0; i < zone.ads.length; ++i) {
        if (zone.ads[i].get_uuid() === this.uuid) {
          log_info("Removing ad with uuid " + this.uuid + " internally");
          zone.ads.splice(i, 1);
          break;
        }
      }
    }
    this.removed = true;
  };

  ADCAd.prototype.is_expired = function is_expired(allow_removal) {
    if (this.expired || this.played || Math.floor(new Date().getTime() / 1000) - this.last_parse > this.expires) {
      if (!this.removed) {
        if (this.adunit_type == 0) {
          this.remove(this.get_native().is_enabled());
        }
      }
      this.update_request_fail_reason(5);
      return true;
    }

    return false;
  };

  ADCAd.prototype.is_playing = function is_playing() {
    if (typeof this.playing === "undefined") {
      return false;
    }
    log_info(this.uuid + " is playing: " + this.playing);
    return this.playing;
  };

  ADCAd.prototype.is_skippable = function is_skippable() {
    return this.video.is_enabled() && this.video.skip_video.is_enabled();
  };

  ADCAd.prototype.is_served = function is_served() {
    return this.served;
  };

  ADCAd.prototype.is_ready = function is_ready() {

    log_info("Components ready: " + this.components_ready());
    log_info(this.uuid + " expired: " + this.is_expired());
    log_info("Network match: " + this.network_match());

    return this.components_ready() && !this.is_expired() && this.network_match();
  };

  ADCAd.prototype.components_ready = function components_ready() {
    for (var i = 0; i < this.ad_components.length; ++i) {
      var component = this.ad_components[i];
      if (!component.is_ready()) {

        this.update_request_fail_reason(6);
        return false;
      }
    }

    return true;
  };

  ADCAd.prototype.update_request_fail_reason = function update_request_fail_reason(reason) {

    var zone = lookup($.app.zones, this.zone_id);
    if (zone !== "undefined") {
      zone.request_fail_reason = reason;
    }
  };

  ADCAd.prototype.network_match = function network_match() {
    var network_type = $.device.network_type;
    log_trace("Network type: " + $.device.network_type);
    log_trace("Network pass filter: " + this.view_network_pass_filter);
    var match = false;
    switch (this.view_network_pass_filter) {
      case "online":
        match = network_type !== "none";
        break;
      case "wifi":
        match = network_type === "wifi";
        break;
      case "cell":
        match = network_type === "cell";
        break;
      case "offline":
        match = network_type === "none";
        break;
      default:
        match = true;
        break;
    }

    this.update_request_fail_reason(match ? 0 : 9);

    return match;
  };

  ADCAd.prototype.invalidate = function invalidate() {

    if (this.served && !this.played) {
      return;
    }

    this.expired = true;
    this.invalidated = true;

    var is_ad_view = false;
    if (this.get_native()) {
      is_ad_view = this.get_native().is_enabled();
    }

    this.remove(is_ad_view);
  };

  ADCAd.prototype.get_uuid = function get_uuid() {
    return this.uuid || "";
  };

  ADCAd.prototype.get_invalidated = function get_invalidated() {
    return this.invalidated;
  };

  ADCAd.prototype.get_button_paths = function get_button_paths() {
    var paths = {};
    if (this.dec.enabled) {
      var uuids = this.dec.get_button_uuids();

      paths["close_normal"] = $.device.get_media_path() + uuids["close_normal"];
      paths["close_down"] = $.device.get_media_path() + uuids["close_down"];
      paths["replay_normal"] = $.device.get_media_path() + uuids["replay_normal"];
      paths["replay_down"] = $.device.get_media_path() + uuids["replay_down"];
    } else if (this.is_skippable()) {
      paths["close_normal"] = $.device.get_media_path() + this.video.get_skip_video().get_image_normal_uuid();
      paths["close_down"] = $.device.get_media_path() + this.video.get_skip_video().get_image_down_uuid();
    }

    log_info("paths: " + JSON.stringify(paths));

    return paths;
  };

  ADCAd.prototype.get_expiration = function get_expiration() {
    return this.expires;
  };

  ADCAd.prototype.get_parse_time = function get_parse_time() {
    return this.last_parse;
  };

  ADCAd.prototype.get_dec = function get_dec() {
    return this.dec;
  };

  ADCAd.prototype.get_dec_source_path = function get_dec_source_path() {
    return this.dec.get_path();
  };

  ADCAd.prototype.get_dec_dissolve_enabled = function get_dec_dissolve_enabled() {
    return this.dec.get_dissolve_enabled();
  };

  ADCAd.prototype.get_dec_dissolve_delay = function get_dec_dissolve_delay() {
    return this.dec.get_dissolve_delay();
  };

  ADCAd.prototype.get_dec_mraid_string = function get_dec_mraid_string() {
    return this.dec.get_mraid_string();
  };

  ADCAd.prototype.get_dec_base_url = function get_dec_base_url() {
    return this.dec.get_base_url();
  };

  ADCAd.prototype.get_video_url = function get_video_url() {
    return this.video.get_url();
  };

  ADCAd.prototype.get_video_uuid = function get_video_uuid() {
    return this.video.get_uuid();
  };

  ADCAd.prototype.get_video_width = function get_video_width() {
    return this.video.get_video_width();
  };

  ADCAd.prototype.get_video_height = function get_video_height() {
    return this.video.get_video_height();
  };

  ADCAd.prototype.get_ive = function get_ive() {
    return this.video.get_in_video_engagement();
  };

  ADCAd.prototype.get_played = function get_played() {
    if (typeof this.played === "undefined") {
      this.played = false;
    }

    return this.played;
  };

  ADCAd.prototype.get_ad_session_id = function get_ad_session_id() {
    if (typeof this.ad_session_id === "undefined") {
      this.ad_session_id = "";
    }

    return this.ad_session_id;
  };

  ADCAd.prototype.get_type = function get_type() {
    return this.adunit_type;
  };

  ADCAd.prototype.get_module_id = function get_module_id() {
    if (typeof this.module_id === "undefined") {
      this.module_id = -1;
    }

    return this.module_id;
  };

  ADCAd.prototype.get_haptic_filepath = function get_haptic_filepath() {
    return this.video.get_haptic_filepath();
  };

  ADCAd.prototype.get_haptic_url = function get_haptic_url() {
    return this.video.get_haptic_url();
  };

  ADCAd.prototype.get_image_overlay_url = function get_image_overlay_url() {
    return this.video.get_image_overlay_url();
  };

  ADCAd.prototype.get_skip_delay = function get_skip_delay() {
    if (this.video.is_enabled()) {
      return this.video.get_skip_delay();
    }
  };

  ADCAd.prototype.get_native_poster = function get_native_poster() {
    return this._native.get_poster();
  };

  ADCAd.prototype.get_native_thumb = function get_native_thumb() {
    return this._native.get_thumb();
  };

  ADCAd.prototype.get_native = function get_native() {
    return this._native;
  };

  ADCAd.prototype.get_zone_id = function get_zone_id() {
    return this.zone_id;
  };

  ADCAd.prototype.get_zone_type = function get_zone_type() {
    return this._type;
  };

  ADCAd.prototype.get_tracking = function get_tracking() {
    return this.tracking || new ADCTracking([]);
  };

  ADCAd.prototype.get_v4iap = function get_v4iap() {
    this.v4iap = this.v4iap || {};
    return this.v4iap;
  };

  return ADCAd;
})();

var ADCAdComponent = (function () {
  function ADCAdComponent(zone_id) {
    _classCallCheck(this, ADCAdComponent);

    this.enabled = false;
    this.ready = false;
    this.zone_id = zone_id;
    this.ad_components = [];
  }

  ADCAdComponent.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCAdComponent.prototype.is_ready = function is_ready() {
    var components_ready = true;
    for (var i = 0; i < this.ad_components.length; ++i) {
      var component = this.ad_components[i];
      if (!component.is_ready()) {
        components_ready = false;
      }
    }

    return components_ready && this.ready;
  };

  ADCAdComponent.prototype.on_ready = function on_ready() {
    this.ready = true;

    var zone = lookup($.app.zones, this.zone_id);
    if (zone !== "undefined") {
      zone.check_zone_status();
    }
  };

  ADCAdComponent.prototype.on_unready = function on_unready() {
    this.ready = false;
  };

  return ADCAdComponent;
})();

var ADCBundleAsset = (function (_ADCAdComponent) {
  _inherits(ADCBundleAsset, _ADCAdComponent);

  function ADCBundleAsset(zone_id) {
    _classCallCheck(this, ADCBundleAsset);

    _ADCAdComponent.call(this, zone_id);
    this.enabled = false;
    this.zone_id = zone_id;
  }

  ADCBundleAsset.prototype._parse = function _parse(manifest, index) {
    this.url = manifest.assets[index];
    this.asset_id = this.url;

    var exists = $.asset_manager.file_exists(this.url);
    if (exists === true) {
      if (!$.app.from_cache) {
        $.asset_manager.set_removable(this.url, false);
      }

      this.ready = true;
    }

    this.enabled = true;
  };

  ADCBundleAsset.prototype.get_uuid = function get_uuid() {
    return this.uuid || "";
  };

  ADCBundleAsset.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCBundleAsset.prototype.get_url = function get_url() {
    return this.url || "";
  };

  return ADCBundleAsset;
})(ADCAdComponent);

var ADCDEC = (function (_ADCAdComponent2) {
  _inherits(ADCDEC, _ADCAdComponent2);

  function ADCDEC(zone_id) {
    _classCallCheck(this, ADCDEC);

    _ADCAdComponent2.call(this);
    this.zone_id = zone_id;

    this.close_normal = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-close-normal-x2.png";
    this.close_normal_uuid = "";
    this.close_down = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-close-down-x2.png";
    this.close_down_uuid = "";
    this.replay_normal = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-replay-normal-x2.png";
    this.replay_normal_uuid = "";
    this.replay_down = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-replay-down-x2.png";
    this.replay_down_uuid = "";

    this.dissolve = false;
    this.dissolve_delay = 0;

    this.download_status = {
      "dec_source": false,
      "close_normal": false,
      "close_down": false,
      "replay_normal": false,
      "replay_down": false
    };
  }

  ADCDEC.prototype._parse = function _parse(ad_source) {
    var _this21 = this;

    this.enabled = true;
    this.dissolve_delay = lookup_number(ad_source, "dissolve_delay");
    this.dissolve = this.dissolve_delay > 0 ? true : false;

    log_trace("Ad companion ad enabled: " + this.enabled);
    log_trace("Ad companion ad dissolve: " + this.dissolve);
    log_trace("Ad companion ad dissolve delay: " + this.dissolve_delay);

    var html5_lookup = lookup(ad_source, "html5");
    if (html5_lookup === "undefined") {
      log_warning("HTML5 not enabled for ad unit. Cannot assemble source");
      return;
    }

    this.load_timeout_enabled = lookup_boolean(html5_lookup, "load_timeout_enabled");
    this.load_timeout = lookup_number(html5_lookup, "load_timeout");
    this.load_spinner_enabled = lookup_boolean(html5_lookup, "load_spinner_enabled");
    this.html5_tag = lookup_string(html5_lookup, "html5_tag");
    this.dec_uuid = "";

    if ($.app.should_force_dec_url()) {
      this.html5_tag = $.app.get_forced_dec_url();
    } else {
      var index = this.html5_tag.indexOf("#");
      if (index !== -1) {
        this.html5_tag = this.html5_tag.substring(0, index);
      }
    }

    log_trace("Ad HTML5 enabled: " + this.enabled);
    log_trace("Ad HTML5 load timeout enabled: " + this.load_timeout_enabled);
    log_trace("Ad HTML5 load timeout: " + this.load_timeout);
    log_trace("Ad HTML5 html5 tag: " + this.html5_tag);

    if (this.html5_tag !== "" && !$.asset_manager.file_exists(this.html5_tag)) {
      log_trace("DEC source does not exist");

      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this21.dec_uuid = uuids[0];
        _this21.prepare_dec(_this21.html5_tag, _this21.dec_uuid);
      });
    } else if ($.asset_manager.file_exists(this.html5_tag)) {
      this.dec_path = $.asset_manager.get_path(this.html5_tag);
      this.download_status["dec_source"] = true;
      if (!$.app.from_cache) {
        $.asset_manager.set_removable(this.html5_tag, false);
      }
    }

    this.queue_asset_download_if_necessary(this.close_normal, "close_normal");
    this.queue_asset_download_if_necessary(this.close_down, "close_down");
    this.queue_asset_download_if_necessary(this.replay_normal, "replay_normal");
    this.queue_asset_download_if_necessary(this.replay_down, "replay_down");

    this.check_ready();
  };

  ADCDEC.prototype.queue_asset_download_if_necessary = function queue_asset_download_if_necessary(url, key) {
    var _this22 = this;

    if (url !== "" && !$.asset_manager.file_exists(url)) {
      log_info("File does not exist at url: " + url);

      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        var uuid = uuids[0];
        switch (url) {
          case _this22.close_normal:
            _this22.close_normal_uuid = uuid;
            _this22.download_file(_this22.close_normal, _this22.close_normal_uuid);
            break;
          case _this22.close_down:
            _this22.close_down_uuid = uuid;
            _this22.download_file(_this22.close_down, _this22.close_down_uuid);
            break;
          case _this22.replay_normal:
            _this22.replay_normal_uuid = uuid;
            _this22.download_file(_this22.replay_normal, _this22.replay_normal_uuid);
            break;
          case _this22.replay_down:
            _this22.replay_down_uuid = uuid;
            _this22.download_file(_this22.replay_down, _this22.replay_down_uuid);
            break;
        }
      });
    } else if ($.asset_manager.file_exists(url)) {
      log_info("File exists at url: " + url);
      this.download_status[key] = true;
      this.check_ready();

      var uuid = $.asset_manager.get_uuid_for_file(url);
      switch (url) {
        case this.close_normal:
          this.close_normal_uuid = uuid;
          break;
        case this.close_down:
          this.close_down_uuid = uuid;
          break;
        case this.replay_normal:
          this.replay_normal_uuid = uuid;
          break;
        case this.replay_down:
          this.replay_down_uuid = uuid;
          break;
      }
    }
  };

  ADCDEC.prototype.download_file = function download_file(url, uuid) {
    var _this23 = this;

    var filepath = $.device.get_media_path() + uuid;
    acni.download(1, url, uuid, filepath, undefined, undefined, undefined, function (url) {
      switch (url) {
        case _this23.close_normal:
          log_trace("ADCDEC close normal asset is ready");
          _this23.download_status["close_normal"] = true;
          break;
        case _this23.close_down:
          log_trace("ADCDEC close down asset is ready");
          _this23.download_status["close_down"] = true;
          break;
        case _this23.replay_normal:
          log_trace("ADCDEC replay normal asset is ready");
          _this23.download_status["replay_normal"] = true;
          break;
        case _this23.replay_down:
          log_trace("ADCDEC replay down asset is ready");
          _this23.download_status["replay_down"] = true;
          break;
      }
      _this23.check_ready();
    });
  };

  ADCDEC.prototype.prepare_dec = function prepare_dec(decURL, uuid) {
    var _this24 = this;

    if ($.device.get_os_name() !== "android") {
      acni.download(1, decURL, uuid, $.device.get_media_path() + uuid, false, undefined, undefined, function (url) {
        acni.prepare_dec(1, $.app.get_mraid_filepath(), $.device.get_media_path() + uuid, JSON.stringify(_this24.get_metadata()), function (reply) {
          var success = lookup_boolean(reply, "success");
          if (!success) {
            log_warning("DEC download failed from url: " + url);
            return;
          }

          _this24.dec_path = $.device.get_media_path() + _this24.dec_uuid;
          _this24.download_status["dec_source"] = true;
          log_info("Successfully saved DEC source at " + _this24.dec_path);

          _this24.check_ready();
        });
      });
    } else {

      this.dec_path = "nonempty";
      this.download_status["dec_source"] = true;
      this.check_ready();
    }
  };

  ADCDEC.prototype.get_button_uuids = function get_button_uuids() {
    var uuids = {};
    uuids["close_normal"] = this.close_normal_uuid;
    uuids["close_down"] = this.close_down_uuid;
    uuids["replay_normal"] = this.replay_normal_uuid;
    uuids["replay_down"] = this.replay_down_uuid;

    return uuids;
  };

  ADCDEC.prototype.get_metadata = function get_metadata() {
    var metadata = {};
    metadata["idfa"] = $.device.advertiser_id || "NOT_PROVIDED";
    metadata["google_ad_id"] = $.device.advertiser_id || "NOT_PROVIDED";
    metadata["sha1_android_id"] = $.device.android_id || "NOT_PROVIDED";
    metadata["platform"] = $.device.os_name || "NOT_PROVIDED";

    metadata["os_version"] = $.device.os_version || "NOT_PROVIDED";
    metadata["device_model"] = $.device.model || "NOT_PROVIDED";
    metadata["device_type"] = $.device.device_type || "NOT_PROVIDED";
    metadata["network_type"] = $.device.network_type || "NOT_PROVIDED";
    metadata["ip_address"] = $.app.ip || "NOT_PROVIDED";
    metadata["adc_lat"] = $.app.lat || "NOT_PROVIDED";
    metadata["adc_long"] = $.app._long || "NOT_PROVIDED";
    metadata["zip_code"] = $.app.zip || "NOT_PROVIDED";
    metadata["country_code"] = $.device.locale_country_code || "NOT_PROVIDED";
    metadata["dma_code"] = $.app.dma || "NOT_PROVIDED";
    metadata["language"] = $.device.locale_language_code || "NOT_PROVIDED";

    var zone = $.app.zones[this.zone_id];
    var current_ad = zone.current_ad();

    metadata["raw_ad_campaign_id"] = current_ad.campaign_id || "NOT_PROVIDED";
    metadata["raw_ad_group_id"] = current_ad.group_id || "NOT_PROVIDED";
    metadata["raw_ad_creative_id"] = current_ad.creative_id || "NOT_PROVIDED";
    metadata["ad_campaign_name"] = current_ad.ad_campaign_name || "NOT_PROVIDED";
    metadata["ad_group_name"] = current_ad.ad_group_name || "NOT_PROVIDED";
    metadata["ad_creative_name"] = current_ad.ad_creative_name || "NOT_PROVIDED";
    metadata["zone_uuid"] = this.zone_id || "NOT_PROVIDED";
    metadata["zone_id"] = this.zone_id || "NOT_PROVIDED";

    metadata["publisher_id"] = $.app.pub_id || "NOT_PROVIDED";

    metadata["app_id"] = $.app.app_id || "NOT_PROVIDED";
    metadata["raw_app_id"] = $.app.raw_app_id || "NOT_PROVIDED";
    metadata["app_name"] = $.app.app_name || "NOT_PROVIDED";

    return metadata;
  };

  ADCDEC.prototype.check_ready = function check_ready() {
    var keys = Object.keys(this.download_status);
    for (var i = 0; i < keys.length; ++i) {
      if (!this.download_status[keys[i]]) {
        log_trace("Download status for key: " + keys[i] + " still false");
        return;
      }
    }

    if ($.app.get_has_mraid()) {
      this.on_ready();
    }
  };

  ADCDEC.prototype.get_path = function get_path() {
    this.dec_path = this.dec_path || "";
    return this.dec_path;
  };

  ADCDEC.prototype.get_base_url = function get_base_url() {
    this.html5_tag = this.html5_tag || "";
    return this.html5_tag;
  };

  ADCDEC.prototype.get_dissolve_enabled = function get_dissolve_enabled() {
    return this.dissolve;
  };

  ADCDEC.prototype.get_dissolve_delay = function get_dissolve_delay() {
    return this.dissolve_delay;
  };

  return ADCDEC;
})(ADCAdComponent);

var ADCDevice = (function () {
  function ADCDevice() {
    var _this25 = this;

    _classCallCheck(this, ADCDevice);

    $.message_dispatcher.register_message_handler(function (message) {
      _this25.battery_level = message["battery_level"];
    }, "Device.on_battery_level_change");

    $.message_dispatcher.register_message_handler(function (message) {
      _this25.battery_state = message["battery_state"];
    }, "Device.on_battery_state_change");

    $.message_dispatcher.register_message_handler(function (message) {
      _this25.update_info(message);
    }, "Device.update_info");

    $.message_dispatcher.register_message_handler(function (message) {
      _this25.network_type = message["network_type"];

      if ($.app === null || $.app.zones === null) {
        return;
      }

      for (var key in $.app.zones) {
        var zone = $.app.zones[key];
        zone.check_zone_status();
      }
    }, "Network.on_status_change");
  }

  ADCDevice.prototype.request_info = function request_info(completion) {
    var _this26 = this;

    acni.get_device_info(1, function (reply) {
      _this26.update_info(reply);
      if (typeof completion !== "undefined") {
        completion();
      }
    });
  };

  ADCDevice.prototype.update_info = function update_info(info) {
    this.advertiser_id = lookup_string(info, "advertiser_id");
    this.carrier = lookup_string(info, "carrier");
    this.user_id = lookup_string(info, "user_id");
    this.data_path = lookup_string(info, "data_path");
    this.device_type = lookup_string(info, "device_type");
    this.screen_height = lookup_number(info, "screen_height");
    this.screen_width = lookup_number(info, "screen_width");
    this.limit_ad_tracking = lookup_boolean(info, "limit_ad_tracking");
    this.locale_language_code = lookup_string(info, "locale_language_code");
    this.locale_country_code = lookup_string(info, "locale_country_code");
    this.mac_address = lookup_string(info, "mac_address");
    this.media_path = lookup_string(info, "media_path");
    this.temp_storage_path = lookup_string(info, "temp_storage_path");
    this.device_brand = lookup_string(info, "device_brand");
    this.device_model = lookup_string(info, "device_model");
    this.device_type = lookup_string(info, "device_type");
    this.network_type = lookup_string(info, "network_type");
    this.os_name = lookup_string(info, "os_name");
    this.os_version = lookup_string(info, "os_version");
    this.sdk_version = lookup_string(info, "sdk_version");
    this.battery_level = lookup_number(info, "battery_level");
    this.battery_state = lookup_number(info, "battery_state");
    this.sdk_type = lookup_string(info, "sdk_type");

    if (this.os_name.toLowerCase() === "iOS".toLowerCase()) {
      this.screen_scale = lookup_number(info, "screen_scale");
      this.capabilities = lookup_string(info, "caps");
    } else if (this.os_name.toLowerCase() === "Android".toLowerCase()) {
      this.android_id = lookup_string(info, "android_id");
      this.device_api = lookup_number(info, "device_api");
      this.memory_used_mb = lookup_number(info, "memory_used_mb");
      this.memory_class = lookup_number(info, "memory_class");
      this.available_stores = lookup_array(info, "available_stores");
      this.permissions = lookup_array(info, "permissions");
      this.immersion = lookup_boolean(info, "immersion");
    }
  };

  ADCDevice.prototype.get_info_for_config = function get_info_for_config() {
    var info = {
      "advertiser_id": this.advertiser_id,
      "carrier": this.carrier,
      "user_id": this.user_id,
      "screen_height": this.screen_height,
      "screen_width": this.screen_width,
      "limit_tracking": this.limit_ad_tracking,
      "ln": this.locale_language_code,
      "locale": this.locale_country_code,
      "device_brand": this.device_brand,
      "device_model": this.device_model,
      "device_type": this.device_type,
      "media_path": this.media_path,
      "temp_storage_path": this.temp_storage_path,
      "network_type": this.network_type,
      "os_name": this.os_name,
      "os_version": this.os_version,
      "sdk_version": this.sdk_version,
      "sdk_type": this.sdk_type
    };

    if (this.os_name.toLowerCase() === "iOS".toLowerCase()) {
      info["screen_scale"] = this.screen_scale;
      info["network_speed"] = this.network_type;
      info["caps"] = this.capabilities;
    } else if (this.os_name.toLowerCase() === "Android".toLowerCase()) {
      info["android_id"] = this.android_id;
      info["device_api"] = this.device_api;
      info["memory_used_mb"] = this.memory_used_mb;
      info["memory_class"] = this.memory_class;
      info["available_stores"] = this.available_stores;
      info["permissions"] = this.permissions;
      info["immersion"] = this.immersion;
    }

    return info;
  };

  ADCDevice.prototype.update_advertiser_info = function update_advertiser_info() {
    var _this27 = this;

    acni.query_advertiser_info(function (reply) {
      _this27.advertiser_id = lookup_string(reply, "advertiser_id");
      _this27.limit_ad_tracking = lookup_boolean(reply, "limit_ad_tracking");
    });
  };

  ADCDevice.prototype.get_info_for_ad_unit = function get_info_for_ad_unit() {
    var info = {};
    info["display_width"] = this.screen_width;
    info["display_height"] = this.screen_height;
    info["supported_orientations"] = 8;
    info["media_path"] = this.media_path;

    return info;
  };

  ADCDevice.prototype.get_os_name = function get_os_name() {
    this.os_name = this.os_name.toLowerCase() || "";
    return this.os_name;
  };

  ADCDevice.prototype.get_media_path = function get_media_path() {
    this.media_path = this.media_path || "";
    return this.media_path;
  };

  ADCDevice.prototype.get_data_path = function get_data_path() {
    this.data_path = this.data_path || "";
    return this.data_path;
  };

  ADCDevice.prototype.get_temp_storage_path = function get_temp_storage_path() {
    this.temp_storage_path = this.temp_storage_path || "";
    return this.temp_storage_path;
  };

  ADCDevice.prototype.get_user_id = function get_user_id() {
    this.user_id = this.user_id || "";
    return this.user_id;
  };

  ADCDevice.prototype.set_user_id = function set_user_id(user_id) {
    this.user_id = user_id || this.user_id;
  };

  return ADCDevice;
})();

var ADCVideo = (function (_ADCAdComponent3) {
  _inherits(ADCVideo, _ADCAdComponent3);

  function ADCVideo(zone_id) {
    _classCallCheck(this, ADCVideo);

    _ADCAdComponent3.call(this, zone_id);
    this.enabled = false;
    this.zone_id = zone_id;
  }

  ADCVideo.prototype._parse = function _parse(video) {
    var _this28 = this;

    this.url = lookup_string(video, "url");
    this.video_uuid = "";
    this.last_modified = lookup_string(video, "last_modified");
    this._width = lookup_number(video, "width");
    this._height = lookup_number(video, "height");
    this.duration = lookup_number(video, "duration");

    this.skip_video = new ADCSkipVideo(this.zone_id);
    var skip_video_lookup = lookup(video, "skip_video");
    if (skip_video_lookup !== "undefined") {
      this.skip_video._parse(skip_video_lookup);
      this.ad_components.push(this.skip_video);
    }

    this.in_video_engagement = new ADCIVE(this.zone_id);
    var in_video_engagement_lookup = lookup(video, "in_video_engagement");
    if (in_video_engagement_lookup !== "undefined") {
      this.in_video_engagement._parse(in_video_engagement_lookup);
      this.ad_components.push(this.in_video_engagement);
    }

    this.haptic = new ADCHaptic(this.zone_id);
    var haptic_lookup = lookup(video, "haptic");
    if (haptic_lookup !== "undefined") {
      this.haptic._parse(haptic_lookup);
      this.ad_components.push(this.haptic);
      this.haptic_filepath = this.haptic.get_filepath();
    }

    var exists = $.asset_manager.file_exists(this.url);
    if (exists === true) {
      var video_uuid = $.asset_manager.get_uuid_for_file(this.url);
      if (video_uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.url, false);
        }
        this.video_uuid = video_uuid;
        this.ready = true;
        log_trace("ADCVideo asset: " + this.url + " with uuid: " + this.video_uuid + " is ready for playback");
      }
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }
        _this28.video_uuid = uuids[0] + ".m4v";

        var filepath = $.device.get_media_path() + _this28.video_uuid;
        acni.download(1, _this28.url, _this28.video_uuid, filepath, undefined, undefined, undefined, function (url) {
          _ADCAdComponent3.prototype.on_ready.call(_this28);
        });
      });
    }

    this.enabled = true;

    log_trace("Ad video enabled: " + this.enabled);
    log_trace("Ad video width: " + this._width);
    log_trace("Ad video height: " + this._height);
    log_trace("Ad video scale: " + this.scale);
    log_trace("Ad video delay: " + this.delay);
  };

  ADCVideo.prototype.get_haptic_filepath = function get_haptic_filepath() {
    this.haptic_filepath = this.haptic_filepath || "";
    return this.haptic_filepath;
  };

  ADCVideo.prototype.get_haptic_url = function get_haptic_url() {

    if (!this.haptic) {
      return "";
    }

    return this.haptic.get_url();
  };

  ADCVideo.prototype.get_image_overlay_url = function get_image_overlay_url() {
    this.in_video_engagement = this.in_video_engagement || new ADCIVE("");
    return this.in_video_engagement.get_image_overlay_url();
  };

  ADCVideo.prototype.get_uuid = function get_uuid() {
    log_trace("video uuid: " + this.video_uuid);
    this.video_uuid = this.video_uuid || "";
    return this.video_uuid;
  };

  ADCVideo.prototype.get_video_width = function get_video_width() {
    return this._width;
  };

  ADCVideo.prototype.get_video_height = function get_video_height() {
    return this._height;
  };

  ADCVideo.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCVideo.prototype.get_in_video_engagement = function get_in_video_engagement() {
    this.in_video_engagement = this.in_video_engagement || new ADCIVE("");
    return this.in_video_engagement;
  };

  ADCVideo.prototype.get_url = function get_url() {
    this.url = this.url || "";
    return this.url;
  };

  ADCVideo.prototype.get_skip_video = function get_skip_video() {
    this.skip_video = this.skip_video || new ADCSkipVideo(this.zone_id);
    return this.skip_video;
  };

  ADCVideo.prototype.get_skip_delay = function get_skip_delay() {
    if (typeof this.skip_video === "undefined") {
      return 0;
    }

    return this.skip_video.get_delay();
  };

  return ADCVideo;
})(ADCAdComponent);

var ADCZoneV4VC = (function () {
  function ADCZoneV4VC(v4vc_config) {
    _classCallCheck(this, ADCZoneV4VC);

    this.enabled = false;
  }

  ADCZoneV4VC.prototype._parse = function _parse(v4vc_config) {
    this.enabled = lookup_boolean(v4vc_config, "enabled");
    this.reward_name = lookup_string(v4vc_config, "reward_name");
    this.reward_amount = lookup_number(v4vc_config, "reward_amount");
    this.client_side = lookup_boolean(v4vc_config, "client_side");
    this.videos_per_reward = lookup_number(v4vc_config, "videos_per_reward");
    this.videos_until_reward = lookup_number(v4vc_config, "videos_until_reward");

    this.enabled = true;

    log_trace("Zone V4VC enabled: " + this.enabled);
    log_trace("Zone V4VC reward name: " + this.reward_name);
    log_trace("Zone V4VC reward amount: " + this.reward_amount);
    log_trace("Zone V4VC client side: " + this.client_side);
    log_trace("Zone V4VC videos per reward: " + this.videos_per_reward);
    log_trace("Zone V4VC videos until reward: " + this.videos_until_reward);
  };

  ADCZoneV4VC.prototype.get_enabled = function get_enabled() {
    return this.enabled;
  };

  ADCZoneV4VC.prototype.get_reward_amount = function get_reward_amount() {
    if (typeof this.reward_amount !== "undefined") {
      return this.reward_amount;
    }

    return 0;
  };

  ADCZoneV4VC.prototype.get_reward_name = function get_reward_name() {
    return this.reward_name || "";
  };

  ADCZoneV4VC.prototype.get_videos_per_reward = function get_videos_per_reward() {
    if (typeof this.videos_per_reward !== "undefined") {
      return this.videos_per_reward;
    }

    return 1;
  };

  ADCZoneV4VC.prototype.get_videos_until_reward = function get_videos_until_reward() {
    if (typeof this.videos_until_reward !== "undefined") {
      return this.videos_until_reward;
    }

    return 1;
  };

  ADCZoneV4VC.prototype.is_client_side = function is_client_side() {
    if (typeof this.client_side !== "undefined") {
      return this.client_side;
    }

    return false;
  };

  ADCZoneV4VC.prototype.get_dict = function get_dict() {
    var dict = {};
    dict["reward_name"] = this.get_reward_name();
    dict["reward_amount"] = this.get_reward_amount();
    dict["views_per_reward"] = 1;
    dict["views_until_reward"] = 1;
    dict["reward_name_plural"] = "TODO";
    dict["reward_prompt"] = "TODO";

    return dict;
  };

  return ADCZoneV4VC;
})();

var ADCAdV4VC = (function () {
  function ADCAdV4VC(zone_id) {
    _classCallCheck(this, ADCAdV4VC);

    this.zone_id = zone_id;
    this.enabled = false;
  }

  ADCAdV4VC.prototype._parse = function _parse(ad_v4vc) {
    this.enabled = true;
  };

  return ADCAdV4VC;
})();

var ADCHaptic = (function (_ADCAdComponent4) {
  _inherits(ADCHaptic, _ADCAdComponent4);

  function ADCHaptic(zone_id) {
    _classCallCheck(this, ADCHaptic);

    _ADCAdComponent4.call(this, zone_id);
    this.enabled = false;
    this.haptic_uuid = "";
  }

  ADCHaptic.prototype._parse = function _parse(haptic) {
    var _this29 = this;

    this._type = lookup_string(haptic, "type");
    this.file_url = lookup_string(haptic, "file_url");
    this.last_modified = lookup_string(haptic, "last_modified");
    this.enabled = true;

    var exists = $.asset_manager.file_exists(this.file_url);
    if (exists) {
      var haptic_uuid = $.asset_manager.get_uuid_for_file(this.file_url);
      if (haptic_uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.url, false);
        }
        this.haptic_uuid = haptic_uuid;
        _ADCAdComponent4.prototype.on_ready.call(this);
      }
    } else {
      acni.uuid(1, 1, function (message_reply) {
        var uuids = lookup_array(message_reply, "uuids");
        if (uuids.length !== 0) {
          _this29.haptic_uuid = uuids[0] + ".hapt";

          var filepath = $.device.get_media_path() + _this29.haptic_uuid;
          acni.download(1, _this29.file_url, _this29.haptic_uuid, filepath, undefined, undefined, undefined, function () {
            _ADCAdComponent4.prototype.on_ready.call(_this29);
          });
        }
      });
    }

    log_trace("Ad video haptic enabled: " + this.enabled);
    log_trace("Ad video haptic type: " + this._type);
    log_trace("Ad video haptic file url: " + this.file_url);
    log_trace("Ad video haptic last modified: " + this.last_modified);
  };

  ADCHaptic.prototype.get_filepath = function get_filepath() {
    if (this.enabled) {
      return $.device.get_media_path() + this.haptic_uuid;
    }

    return "";
  };

  ADCHaptic.prototype.get_url = function get_url() {
    if (this.enabled) {
      return this.file_url;
    }

    return "";
  };

  return ADCHaptic;
})(ADCAdComponent);

var ADCImageOverlay = (function (_ADCAdComponent5) {
  _inherits(ADCImageOverlay, _ADCAdComponent5);

  function ADCImageOverlay(zone_id) {
    _classCallCheck(this, ADCImageOverlay);

    _ADCAdComponent5.call(this, zone_id);
    this.enabled = false;
  }

  ADCImageOverlay.prototype._parse = function _parse(image_overlay) {
    var _this30 = this;

    if (image_overlay === "undefined") {
      return false;
    }

    this.image_normal = lookup_string(image_overlay, "image_normal");
    this.image_normal_last_modified = lookup_string(image_overlay, "image_normal_last_modified");
    this.image_down = lookup_string(image_overlay, "image_down");
    this.image_down_last_modified = lookup_string(image_overlay, "image_down_last_modified");

    this.image_normal_ready = false;
    this.image_down_ready = false;

    log_trace("Ad video IVE image image normal: " + this.image_normal);
    log_trace("Ad video IVE image normal last modified: " + this.image_normal_last_modified);
    log_trace("Ad video IVE image image down: " + this.image_down);
    log_trace("Ad video IVE image image down last modified: " + this.image_down_last_modified);

    var exists = $.asset_manager.file_exists(this.image_normal);
    if (exists) {
      var image_uuid = $.asset_manager.get_uuid_for_file(this.image_normal);
      if (image_uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.image_normal, false);
        }
        this.image_normal_uuid = image_uuid;
        this.image_normal_ready = true;
      }
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length !== 0) {
          _this30.image_normal_uuid = uuids[0];

          var filepath = $.device.get_media_path() + _this30.image_normal_uuid;
          acni.download(1, _this30.image_normal, _this30.image_normal_uuid, filepath, false, undefined, undefined, function (url) {
            _this30.image_normal_ready = true;
            _this30.check_ready();
          });
        }
      });
    }

    var exists = $.asset_manager.file_exists(this.image_down);
    if (exists) {
      var image_uuid = $.asset_manager.get_uuid_for_file(this.image_down);
      if (image_uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.image_down, false);
        }
        this.image_down_uuid = image_uuid;
        this.image_down_ready = true;
      }
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length !== 0) {
          _this30.image_down_uuid = uuids[0];

          var filepath = $.device.get_media_path() + _this30.image_down_uuid;
          acni.download(1, _this30.image_down, _this30.image_down_uuid, filepath, false, undefined, undefined, function (url) {
            _this30.image_normal_ready = true;
            _this30.check_ready();
          });
        }
      });
    }

    this.check_ready();

    this.enabled = true;

    return true;
  };

  ADCImageOverlay.prototype.check_ready = function check_ready() {
    if (this.image_normal_ready && this.image_down_ready || this.image_normal_ready && this.image_normal === this.image_down) {
      _ADCAdComponent5.prototype.on_ready.call(this);
    }
  };

  ADCImageOverlay.prototype.get_filepath = function get_filepath() {
    if (this.enabled) {
      return $.device.get_media_path() + this.image_normal_uuid;
    }

    return "";
  };

  ADCImageOverlay.prototype.get_url = function get_url() {
    if (this.enabled) {
      return this.image_normal;
    }

    return "";
  };

  return ADCImageOverlay;
})(ADCAdComponent);

var ADCIVE = (function (_ADCAdComponent6) {
  _inherits(ADCIVE, _ADCAdComponent6);

  function ADCIVE(zone_id) {
    _classCallCheck(this, ADCIVE);

    _ADCAdComponent6.call(this, zone_id);
    this.enabled = false;
  }

  ADCIVE.prototype._parse = function _parse(in_video_engagement) {
    var _this31 = this;

    this.image_normal = lookup_string(in_video_engagement, "image_normal");
    this.image_normal_uuid = "";
    this.image_normal_downloaded = false;
    this.image_normal_last_modified = lookup_string(in_video_engagement, "image_normal_last_modified");
    this.image_down = lookup_string(in_video_engagement, "image_down");
    this.image_down_uuid = "";
    this.image_down_downloaded = false;
    this.image_down_last_modified = lookup_string(in_video_engagement, "image_down_last_modified");
    this._width = lookup_number(in_video_engagement, "width");
    this._height = lookup_number(in_video_engagement, "height");
    this.scale = lookup_number(in_video_engagement, "scale");
    this.delay = lookup_number(in_video_engagement, "delay");
    this._event = lookup_string(in_video_engagement, "event");
    this.label_rgba = lookup_string(in_video_engagement, "label_rgba");
    this.click_action = lookup_string(in_video_engagement, "click_action");
    this.click_action_type = lookup_string(in_video_engagement, "click_action_type");
    this._label = lookup_string(in_video_engagement, "label");
    this.label_html = lookup_string(in_video_engagement, "label_html");
    this.iap_pending_message = lookup_string(in_video_engagement, "iap_pending_message");

    log_trace("Ad video IVE image normal: " + this.image_normal);
    log_trace("Ad video IVE image normal last modified: " + this.image_down_last_modified);
    log_trace("Ad video IVE image down: " + this.image_down);
    log_trace("Ad video IVE image down last modified: " + this.image_down_last_modified);
    log_trace("Ad video IVE width: " + this._width);
    log_trace("Ad video IVE height: " + this._height);
    log_trace("Ad video IVE scale: " + this.scale);
    log_trace("Ad video IVE delay: " + this.delay);
    log_trace("Ad video IVE _event: " + this._event);
    log_trace("Ad video IVE label rgba: " + this.label_rgba);
    log_trace("Ad video IVE click action: " + this.click_action);
    log_trace("Ad video IVE click action type: " + this.click_action_type);
    log_trace("Ad video IVE label: " + this._label);
    log_trace("Ad video IVE label HTML: " + this.label_html);

    this.image_overlay = new ADCImageOverlay();
    var image_overlay_lookup = lookup(in_video_engagement, "image_overlay");
    if (image_overlay_lookup !== "undefined") {
      this.image_overlay._parse(image_overlay_lookup);
      this.ad_components.push(this.image_overlay);
    }

    this.waiting_for_download_uuids = [];

    var exists = $.asset_manager.file_exists(this.image_normal);
    if (exists === true) {
      log_trace("ADCIVE image normal asset: " + this.image_normal + " already exists");
      this.image_normal_downloaded = true;
      this.image_normal_uuid = $.asset_manager.get_uuid_for_file(this.image_normal);
    } else {
      acni.uuid(1, 1, function (reply) {
        if (_this31.waiting_for_download_uuids.length === 0) {
          return;
        }

        var uuids = lookup_array(reply, "uuids");
        if (uuids.length !== 0) {
          var download_id = "";
          var download_url = "";
          var waiting_asset = _this31.waiting_for_download_uuids.shift();
          if (waiting_asset === _this31.image_normal) {
            _this31.image_normal_uuid = uuids[0];
            download_id = _this31.image_normal_uuid;
            download_url = _this31.image_normal;
          } else if (waiting_asset === _this31.image_down) {
            _this31.image_down_uuid = uuids[0];
            download_id = _this31.image_down_uuid;
            download_url = _this31.image_down;
          }

          var filepath = $.device.get_media_path() + uuids[0];
          acni.download(1, download_url, uuids[0], filepath, undefined, undefined, undefined, function () {
            _this31.image_normal_downloaded = true;
            _this31.check_ready();
          });
        }
      });
      this.waiting_for_download_uuids.push(this.image_normal);
    }

    var exists = $.asset_manager.file_exists(this.image_down);
    if (exists === true) {
      log_trace("ADCIVE image down asset: " + this.image_down + " already exists");
      this.image_down_downloaded = true;
      this.image_down_uuid = $.asset_manager.get_uuid_for_file(this.image_down);
    } else {
      acni.uuid(1, 1, function (reply) {
        if (_this31.waiting_for_download_uuids.length === 0) {
          return;
        }

        var uuids = lookup_array(reply, "uuids");
        if (uuids.length !== 0) {
          var download_id = "";
          var download_url = "";
          var waiting_asset = _this31.waiting_for_download_uuids.shift();
          if (waiting_asset === _this31.image_normal) {
            _this31.image_normal_uuid = uuids[0];
            download_id = _this31.image_normal_uuid;
            download_url = _this31.image_normal;
          } else if (waiting_asset === _this31.image_down) {
            _this31.image_down_uuid = uuids[0];
            download_id = _this31.image_down_uuid;
            download_url = _this31.image_down;
          }

          var filepath = $.device.get_media_path() + uuids[0];
          acni.download(1, download_url, uuids[0], filepath, undefined, undefined, undefined, function () {
            _this31.image_down_downloaded = true;
            _this31.check_ready();
          });
        }
      });
      this.waiting_for_download_uuids.push(this.image_down);
    }

    this.check_ready();

    this.enabled = true;
  };

  ADCIVE.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCIVE.prototype.is_image_overlay_enabled = function is_image_overlay_enabled() {
    return this.image_overlay.enabled;
  };

  ADCIVE.prototype.check_ready = function check_ready() {
    if (this.image_normal_downloaded && this.image_down_downloaded || this.image_normal_downloaded && this.image_normal === this.image_down) {
      _ADCAdComponent6.prototype.on_ready.call(this);
    }
  };

  ADCIVE.prototype.get_delay = function get_delay() {
    this.delay = this.delay || 0;
    return this.delay;
  };

  ADCIVE.prototype.get_event = function get_event() {
    this._event = this._event || "";
    return this._event;
  };

  ADCIVE.prototype.get_height = function get_height() {
    this._height = this._height || 0;
    return this._height;
  };

  ADCIVE.prototype.get_width = function get_width() {
    this._width = this._width || 0;
    return this._width;
  };

  ADCIVE.prototype.get_click_type = function get_click_type() {
    this.click_action_type = this.click_action_type || "";
    return this.click_action_type;
  };

  ADCIVE.prototype.get_click_action = function get_click_action() {
    this.click_action = this.click_action || "";
    return this.click_action;
  };

  ADCIVE.prototype.get_label = function get_label() {
    this._label = this._label || "";
    return this._label;
  };

  ADCIVE.prototype.get_label_html = function get_label_html() {
    this.label_html = this.label_html || "";
    return this.label_html;
  };

  ADCIVE.prototype.get_image_filepath = function get_image_filepath() {
    this.image_normal_uuid = this.image_normal_uuid || "";
    return $.device.get_media_path() + this.image_normal_uuid;
  };

  ADCIVE.prototype.get_image_overlay_url = function get_image_overlay_url() {
    if (this.enabled && this.image_overlay_enabled) {
      return this.image_overlay.get_url();
    }

    return "";
  };

  ADCIVE.prototype.get_image_overlay_filepath = function get_image_overlay_filepath() {
    if (this.enabled && this.image_overlay.enabled) {
      return this.image_overlay.get_filepath();
    }

    return "";
  };

  ADCIVE.prototype.get_image_normal_filepath = function get_image_normal_filepath() {
    if (this.enabled) {
      return $.device.get_media_path() + this.image_normal_uuid;
    }

    return "";
  };

  ADCIVE.prototype.get_image_down_filepath = function get_image_down_filepath() {
    if (this.enabled) {
      return $.device.get_media_path() + this.image_down_uuid;
    }

    return "";
  };

  return ADCIVE;
})(ADCAdComponent);

var ADCSkipVideo = (function (_ADCAdComponent7) {
  _inherits(ADCSkipVideo, _ADCAdComponent7);

  function ADCSkipVideo(zone_id) {
    _classCallCheck(this, ADCSkipVideo);

    _ADCAdComponent7.call(this, zone_id);
    this.enabled = false;
  }

  ADCSkipVideo.prototype._parse = function _parse(skip_video) {
    this.image_normal = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-close-normal-x2.png";
    this.image_normal_uuid = "";
    this.image_normal_downloaded = false;
    this.image_down = "https://s3.amazonaws.com/adc-ad-assets/output_sdk_assets/end-card-close-down-x2.png";
    this.image_down_uuid = "";
    this.image_down_downloaded = false;
    this.delay = lookup_number(skip_video, "delay");

    var image_normal_exists = $.asset_manager.file_exists(this.image_normal);
    if (image_normal_exists === true) {
      log_trace("ADCSkipVideo image normal asset: " + this.image_normal + " already exists");
      this.image_normal_downloaded = true;
      this.image_normal_uuid = $.asset_manager.get_uuid_for_file(this.image_normal);
    } else {
      this.download_file(this.image_normal, true);
    }

    var image_down_exists = $.asset_manager.file_exists(this.image_down);
    if (image_down_exists === true) {
      log_trace("ADCSkipVideo image down asset: " + this.image_down + " already exists");
      this.image_down_downloaded = true;
      this.image_down_uuid = $.asset_manager.get_uuid_for_file(this.image_down);
    } else {
      this.download_file(this.image_down, this.image_down_downloaded);
    }

    this.check_ready();
    this.enabled = true;

    log_trace("Ad video skip video enabled: " + this.enabled);
    log_trace("Ad video skip video image normal: " + this.image_normal);
    log_trace("Ad video skip video image down: " + this.image_down);
    log_trace("Ad video skip video delay: " + this.delay);
  };

  ADCSkipVideo.prototype.download_file = function download_file(url, is_image_normal) {
    var _this32 = this;

    acni.uuid(1, 1, function (reply) {
      var dl_uuid = lookup_array(reply, "uuids")[0];

      var download_message = {
        "m_type": "WebServices.download",
        "m_origin": 1,
        "m_target": 0,
        "url": url,
        "filepath": $.device.get_media_path() + dl_uuid
      };
      $.asset_manager.queue_outbound_download(new ADCAssetDownload(download_message, dl_uuid, function (url) {
        if (is_image_normal) {
          _this32.image_normal_uuid = dl_uuid;
          _this32.image_normal_downloaded = true;
        } else {
          _this32.image_down_uuid = dl_uuid;
          _this32.image_down_downloaded = true;
        }

        _this32.check_ready();
      }), true);
    });
  };

  ADCSkipVideo.prototype.check_ready = function check_ready() {
    log_info("check ready called");
    if (this.image_normal_downloaded && this.image_down_downloaded) {
      log_info("skip video ready");
      _ADCAdComponent7.prototype.on_ready.call(this);
    } else {
      log_info("skip video not ready");
    }
  };

  ADCSkipVideo.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCSkipVideo.prototype.get_delay = function get_delay() {
    if (typeof this.delay === "undefined") {
      return 0;
    }

    return this.delay;
  };

  ADCSkipVideo.prototype.get_image_normal_uuid = function get_image_normal_uuid() {
    this.image_normal_uuid = this.image_normal_uuid || "";
    return this.image_normal_uuid;
  };

  ADCSkipVideo.prototype.get_image_down_uuid = function get_image_down_uuid() {
    this.image_down_uuid = this.image_down_uuid || "";
    return this.image_down_uuid;
  };

  return ADCSkipVideo;
})(ADCAdComponent);

var ADCInAppBrowser = (function (_ADCAdComponent8) {
  _inherits(ADCInAppBrowser, _ADCAdComponent8);

  function ADCInAppBrowser(zone_id) {
    _classCallCheck(this, ADCInAppBrowser);

    _ADCAdComponent8.call(this, zone_id);
  }

  ADCInAppBrowser.prototype._parse = function _parse(in_app_browser) {
    this.enabled = true;

    _ADCAdComponent8.prototype.on_ready.call(this);
  };

  return ADCInAppBrowser;
})(ADCAdComponent);

var ADCNative = (function (_ADCAdComponent9) {
  _inherits(ADCNative, _ADCAdComponent9);

  function ADCNative(zone_id) {
    _classCallCheck(this, ADCNative);

    _ADCAdComponent9.call(this, zone_id);
    this.enabled = false;
    this.zone_id = zone_id;

    this.mute = "https://dl.dropboxusercontent.com/u/46312042/video_mute_btn_v2%402x.png";
    this.mute_uuid = "";
    this.unmute = "https://dl.dropboxusercontent.com/u/46312042/video_unmute_btn_v2%402x.png";
    this.unmute_uuid = "";
    this.mute_downloaded = false;
    this.unmute_downloaded = false;
  }

  ADCNative.prototype._parse = function _parse(_native) {
    this._title = lookup_string(_native, "title");
    this.advertiser_name = lookup_string(_native, "advertiser_name");
    this._description = lookup_string(_native, "description");

    this.ready = false;
    this.enabled = true;

    this.thumb = new ADCNativeThumb(this.zone_id);
    var thumb_lookup = lookup(_native, "thumb");
    if (thumb_lookup !== "undefined") {
      this.thumb._parse(thumb_lookup);
      this.ad_components.push(this.thumb);
    }

    this.poster = new ADCNativePoster(this.zone_id);
    var poster_lookup = lookup(_native, "poster");
    if (poster_lookup !== "undefined") {
      this.poster._parse(poster_lookup);
      this.ad_components.push(this.poster);
    }

    this.overlay = new ADCNativeOverlay(this.zone_id);
    var overlay_lookup = lookup(_native, "overlay");
    if (overlay_lookup !== "undefined") {
      this.overlay._parse(overlay_lookup);
    }

    var mute_exists = $.asset_manager.file_exists(this.mute);
    if (mute_exists) {
      this.mute_downloaded = true;
      this.mute_uuid = $.asset_manager.get_uuid_for_file(this.mute);
    } else {
      this.download_file(this.mute, true);
    }

    var unmute_exists = $.asset_manager.file_exists(this.unmute);
    if (unmute_exists) {
      this.unmute_downloaded = true;
      this.unmute_uuid = $.asset_manager.get_uuid_for_file(this.unmute);
    } else {
      this.download_file(this.unmute, false);
    }

    this.check_ready();
  };

  ADCNative.prototype.download_file = function download_file(url, is_mute) {
    var _this33 = this;

    acni.uuid(1, 1, function (reply) {
      var dl_uuid = lookup_array(reply, "uuids")[0];

      var download_message = {
        "m_type": "WebServices.download",
        "m_origin": 1,
        "m_target": 0,
        "url": url,
        "filepath": $.device.get_media_path() + dl_uuid
      };

      $.asset_manager.queue_outbound_download(new ADCAssetDownload(download_message, dl_uuid, function (url) {
        if (is_mute) {
          _this33.mute_uuid = dl_uuid;
          _this33.mute_downloaded = true;
        } else {
          _this33.unmute_uuid = dl_uuid;
          _this33.unmute_downloaded = true;
        }
        _this33.check_ready();
      }), true);
    });
  };

  ADCNative.prototype.check_ready = function check_ready() {
    if (this.mute_downloaded && this.unmute_downloaded) {
      _ADCAdComponent9.prototype.on_ready.call(this);
    }
  };

  ADCNative.prototype.get_mute_uuid = function get_mute_uuid() {
    return this.mute_uuid || "";
  };

  ADCNative.prototype.get_unmute_uuid = function get_unmute_uuid() {
    return this.unmute_uuid || "";
  };

  ADCNative.prototype.get_advertiser_name = function get_advertiser_name() {
    this.advertiser_name = this.advertiser_name || "";
    return this.advertiser_name;
  };

  ADCNative.prototype.get_description = function get_description() {
    this.description = this.description || "";
    return this._description;
  };

  ADCNative.prototype.get_title = function get_title() {
    this._title = this._title || "";
    return this._title;
  };

  ADCNative.prototype.get_poster = function get_poster() {
    this.poster = this.poster || new ADCNativePoster("");
    return this.poster;
  };

  ADCNative.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCNative.prototype.get_poster_filepath = function get_poster_filepath() {
    this.poster = this.poster || new ADCNativePoster("");
    return this.poster.get_filepath();
  };

  ADCNative.prototype.get_overlay = function get_overlay() {
    this.overlay = this.overlay || "";
    return this.overlay;
  };

  ADCNative.prototype.get_thumb_filepath = function get_thumb_filepath() {
    this.thumb = this.thumb || new ADCNativeThumb("");
    return this.thumb.get_filepath();
  };

  ADCNative.prototype.get_thumb = function get_thumb() {
    this.thumb = this.thumb || "";
    return this.thumb;
  };

  return ADCNative;
})(ADCAdComponent);

var ADCNativeOverlay = (function () {
  function ADCNativeOverlay(zone_id) {
    _classCallCheck(this, ADCNativeOverlay);

    this.enabled = false;
    this.zone_id = zone_id;
  }

  ADCNativeOverlay.prototype._parse = function _parse(overlay) {
    this.in_app = lookup_boolean(overlay, "in_app");
    this._label = lookup_string(overlay, "label");
    this.click_action = lookup_string(overlay, "click_action");
    this.click_action_pid = lookup_string(overlay, "click_action_pid");
    this.click_action_type = lookup_string(overlay, "click_action_type");

    this.enabled = true;
  };

  ADCNativeOverlay.prototype.is_enabled = function is_enabled() {
    return this.enabled;
  };

  ADCNativeOverlay.prototype.get_label = function get_label() {
    this._label = this._label || "";
    return this._label;
  };

  ADCNativeOverlay.prototype.get_click_action = function get_click_action() {
    this.click_action = this.click_action || "";
    return this.click_action;
  };

  ADCNativeOverlay.prototype.get_click_action_type = function get_click_action_type() {
    this.click_action_type = this.click_action_type || "";
    return this.click_action_type;
  };

  return ADCNativeOverlay;
})();

var ADCNativePoster = (function (_ADCAdComponent10) {
  _inherits(ADCNativePoster, _ADCAdComponent10);

  function ADCNativePoster(zone_id) {
    _classCallCheck(this, ADCNativePoster);

    _ADCAdComponent10.call(this, zone_id);
    this.enabled = false;
    this.zone_id = zone_id;
    this.filepath = "";
    this.uuid = "";
  }

  ADCNativePoster.prototype._parse = function _parse(native_poster) {
    var _this34 = this;

    this.url = lookup_string(native_poster, "image");
    this.click_action_type = lookup_string(native_poster, "click_action_type");
    this.click_action = lookup_string(native_poster, "click_action");
    this.enabled = true;

    var exists = $.asset_manager.file_exists(this.url);
    if (exists) {
      var uuid = $.asset_manager.get_uuid_for_file(this.url);
      if (uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.url, false);
        }
        this.uuid = uuid;
        this.ready = true;
      }
    } else {
      acni.uuid(1, 1, function (message_reply) {
        var uuids = lookup_array(message_reply, "uuids");
        if (uuids.length !== 0) {
          _this34.uuid = uuids[0];

          var download_message = {
            "m_type": "WebServices.download",
            "m_origin": 1,
            "m_target": 0,
            "url": _this34.url,
            "filepath": $.device.get_media_path() + _this34.uuid
          };
          $.asset_manager.queue_outbound_download(new ADCAssetDownload(download_message, _this34.uuid, function (url) {
            _this34.filepath = $.device.get_media_path() + _this34.uuid;
            _ADCAdComponent10.prototype.on_ready.call(_this34);
          }));
        }
      });
    }
  };

  ADCNativePoster.prototype.get_url = function get_url() {
    this.url = this.url || "";
    return this.url;
  };

  ADCNativePoster.prototype.get_click_action_type = function get_click_action_type() {
    this.click_action_type = this.click_action_type || "";
    return this.click_action_type;
  };

  ADCNativePoster.prototype.get_click_action = function get_click_action() {
    this.click_action = this.click_action || "";
    return this.click_action;
  };

  ADCNativePoster.prototype.get_filepath = function get_filepath() {
    this.uuid = this.uuid || "";
    return $.device.get_media_path() + this.uuid;
  };

  return ADCNativePoster;
})(ADCAdComponent);

var ADCNativeThumb = (function (_ADCAdComponent11) {
  _inherits(ADCNativeThumb, _ADCAdComponent11);

  function ADCNativeThumb(zone_id) {
    _classCallCheck(this, ADCNativeThumb);

    _ADCAdComponent11.call(this, zone_id);
    this.enabled = false;
    this.zone_id = zone_id;
    this.filepath = "";
  }

  ADCNativeThumb.prototype._parse = function _parse(native_thumb) {
    var _this35 = this;

    this.url = lookup_string(native_thumb, "image");

    var exists = $.asset_manager.file_exists(this.url);
    if (exists) {
      var uuid = $.asset_manager.get_uuid_for_file(this.url);
      if (uuid !== "") {
        if (!$.app.from_cache) {
          $.asset_manager.set_removable(this.url, false);
        }
        this.uuid = uuid;
        this.filepath = $.device.get_media_path() + uuid;
        _ADCAdComponent11.prototype.on_ready.call(this);
      }
    } else {
      acni.uuid(1, 1, function (message_reply) {
        var uuids = lookup_array(message_reply, "uuids");
        if (uuids.length !== 0) {
          _this35.uuid = uuids[0];

          var download_message = {
            "m_type": "WebServices.download",
            "m_origin": 1,
            "m_target": 0,
            "url": _this35.url,
            "filepath": $.device.get_media_path() + _this35.uuid
          };
          $.asset_manager.queue_outbound_download(new ADCAssetDownload(download_message, _this35.uuid, function (url) {
            _this35.filepath = $.device.get_media_path() + _this35.uuid;
            _ADCAdComponent11.prototype.on_ready.call(_this35);
          }));
        }
      });
    }
  };

  ADCNativeThumb.prototype.get_url = function get_url() {
    this.url = this.url || "";
    return this.url;
  };

  ADCNativeThumb.prototype.get_filepath = function get_filepath() {
    this.filepath = this.filepath || "";
    return this.filepath;
  };

  return ADCNativeThumb;
})(ADCAdComponent);

var ADCBrowser = (function () {
  function ADCBrowser() {
    _classCallCheck(this, ADCBrowser);

    this.back_button_ready = false;
    this.forward_button_ready = false;
    this.reload_button_ready = false;
    this.close_button_ready = false;
    this.stop_button_ready = false;

    this.logo_image_ready = false;
    this.background_bar_image_ready = false;
    this.background_tile_image_ready = false;
    this.tiny_glow_image_ready = false;

    this.back_button_image_uuid = "";
    this.forward_button_image_uuid = "";
    this.reload_button_image_uuid = "";
    this.close_button_image_uuid = "";
    this.stop_button_image_uuid = "";

    this.logo_image_uuid = "";
    this.background_bar_image_uuid = "";
    this.background_tile_image_uuid = "";
    this.tiny_glow_image_uuid = "";
  }

  ADCBrowser.prototype.prepare = function prepare(completion) {
    var _this36 = this;

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-back-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-back-x2.png");
      this.back_button_image_uuid = uuid;
      this.back_button_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.back_button_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.back_button_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-back-x2.png", _this36.back_button_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.back_button_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-forward-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-forward-x2.png");
      this.forward_button_image_uuid = uuid;
      this.forward_button_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.forward_button_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.forward_button_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-forward-x2.png", _this36.forward_button_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.forward_button_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-reload-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-reload-x2.png");
      this.reload_button_image_uuid = uuid;
      this.reload_button_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.reload_button_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.reload_button_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-reload-x2.png", _this36.reload_button_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.reload_button_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-close-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-close-x2.png");
      this.close_button_image_uuid = uuid;
      this.close_button_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.close_button_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.close_button_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-close-x2.png", _this36.close_button_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.close_button_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-stop-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-stop-x2.png");
      this.stop_button_image_uuid = uuid;
      this.stop_button_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.stop_button_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.stop_button_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-stop-x2.png", _this36.stop_button_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.stop_button_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-logo-x2.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-logo-x2.png");
      this.logo_image_uuid = uuid;
      this.logo_image_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.logo_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.logo_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-logo-x2.png", _this36.logo_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.logo_image_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-bar-background.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-bar-background.png");
      this.background_bar_image_uuid = uuid;
      this.background_bar_image_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.background_bar_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.background_bar_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/browser-bar-background.png", _this36.background_bar_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.background_bar_image_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/bg-applelinen-tile.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/bg-applelinen-tile.png");
      this.background_tile_image_uuid = uuid;
      this.background_tile_image_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.background_tile_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.background_tile_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/bg-applelinen-tile.png", _this36.background_tile_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.background_tile_image_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if ($.asset_manager.file_exists("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/tiny-glow.png")) {
      var uuid = $.asset_manager.get_uuid_for_file("http://d3v1lb83psg9di.cloudfront.net/output_static/ui/tiny-glow.png");
      this.tiny_glow_image_uuid = uuid;
      this.tiny_glow_image_ready = true;
    } else {
      acni.uuid(1, 1, function (reply) {
        var uuids = lookup_array(reply, "uuids");
        if (uuids.length === 0) {
          return;
        }

        _this36.tiny_glow_image_uuid = uuids[0];
        var filepath = $.device.get_media_path() + _this36.tiny_glow_image_uuid;
        acni.download(1, "http://d3v1lb83psg9di.cloudfront.net/output_static/ui/tiny-glow.png", _this36.tiny_glow_image_uuid, filepath, false, undefined, undefined, function (url) {
          _this36.tiny_glow_image_ready = true;
          if (_this36.check_ready()) {
            completion(_this36.get_config());
          }
        });
      });
    }

    if (this.check_ready()) {
      completion(this.get_config());
    }
  };

  ADCBrowser.prototype.check_ready = function check_ready() {
    var ready = true;
    if (!this.back_button_ready) {
      ready = false;
    }

    if (!this.forward_button_ready) {
      ready = false;
    }

    if (!this.reload_button_ready) {
      ready = false;
    }

    if (!this.close_button_ready) {
      ready = false;
    }

    if (!this.stop_button_ready) {
      ready = false;
    }

    if (!this.logo_image_ready) {
      ready = false;
    }

    if (!this.background_bar_image_ready) {
      ready = false;
    }

    if (!this.background_tile_image_ready) {
      ready = false;
    }

    if (!this.tiny_glow_image_ready) {
      ready = false;
    }

    return ready;
  };

  ADCBrowser.prototype.get_config = function get_config() {
    var config = {};
    var filepath = $.device.get_media_path();
    config["back"] = filepath + this.back_button_image_uuid;
    config["forward"] = filepath + this.forward_button_image_uuid;
    config["reload"] = filepath + this.reload_button_image_uuid;
    config["close"] = filepath + this.close_button_image_uuid;
    config["stop"] = filepath + this.stop_button_image_uuid;
    config["logo"] = filepath + this.logo_image_uuid;
    config["background_bar"] = filepath + this.background_bar_image_uuid;
    config["background_tile"] = filepath + this.background_tile_image_uuid;
    config["tiny_glow"] = filepath + this.tiny_glow_image_uuid;

    log_info("Web view config: " + JSON.stringify(config));

    return config;
  };

  return ADCBrowser;
})();

var acni = (function (global) {
  var acni = {};
  acni.completion_handlers = {};
  acni.download = function (module_id, url, uuid, filepath, no_cellular, encrypt, encoding, completion) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Controller.queue_download",
      "m_origin": module_id,
      "m_target": 1,
      "uuid": uuid,
      "download_config": {
        "m_id": $.message_dispatcher.next_message_id(),
        "m_type": "WebServices.download",
        "m_origin": 1,
        "m_target": 0,
        "url": url,
        "filepath": filepath,
        "no_cellular": no_cellular,
        "encrypt": encrypt,
        "encoding": encoding
      }
    });

    if (typeof completion !== "undefined" && completion !== null) {
      acni.completion_handlers[uuid] = completion;
    }
  };

  acni.on_download_complete = function (uuid, url) {
    var completion_handler = lookup(acni.completion_handlers, uuid);
    if (completion_handler !== "undefined") {
      completion_handler(url);

      delete acni.completion_handlers[uuid];
    }
  };

  acni.expiration = function (ad_session_id, type) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.expiring",
      "m_origin": 1,
      "m_target": 0,
      "id": ad_session_id,
      "type": type
    });
  };
  acni.network_request = function (module_id, type, url, is_third_party, is_v4vc, no_redirect, no_cellular, payload, completion) {
    var message_type = "WebServices.get";
    if (typeof payload !== "undefined" && payload !== null) {
      message_type = "WebServices.post";
      var content_type = "application/json";
    }

    if (payload === null) {
      payload = undefined;
    }

    acni.uuid(module_id, 1, function (reply) {
      var uuids = lookup_array(reply, "uuids");
      if (uuids.length === 0) {
        return;
      }

      $.message_dispatcher.queue_outbound_message({
        "m_type": "Controller.queue_network_request",
        "m_origin": module_id,
        "m_target": 1,
        "uuid": uuids[0],
        "request_config": {
          "m_id": $.message_dispatcher.next_message_id(),
          "m_type": message_type,
          "m_origin": module_id,
          "m_target": 0,
          "type": type,
          "url": url,
          "content_type": content_type,
          "no_redirect": no_redirect,
          "no_cellular": no_cellular,
          "is_third_party": is_third_party,
          "is_v4vc": is_v4vc,
          "content": payload
        }
      });

      if (typeof completion !== "undefined" && completion !== null) {
        acni.completion_handlers[uuids[0]] = completion;
      }
    });
  };

  acni.on_network_request_complete = function (uuid, response) {
    var completion_handler = lookup(acni.completion_handlers, uuid);
    if (completion_handler !== "undefined") {
      completion_handler(response);
      delete acni.completion_handlers[uuid];
    }
  };
  acni.get_native_app_info = function (module_id, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.get_app_info",
      "m_origin": module_id,
      "m_target": 0
    }, reply_handler);
  };

  acni.v4vc_reward = function (module_id, success, reward_amount, reward_name, zone_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.v4vc_reward",
      "m_origin": module_id,
      "m_target": 0,
      "success": success,
      "reward_amount": reward_amount,
      "reward_name": reward_name,
      "zone_id": zone_id
    });
  };

  acni.zone_info = function (module_id, zone_id, reward, type, _status, app_session_id, rewarded) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.zone_info",
      "m_origin": module_id,
      "m_target": 0,
      "zone_id": zone_id,
      "reward": reward,
      "type": type,
      "status": _status,
      "app_session_id": app_session_id,
      "rewarded": rewarded
    });

    log_info("Zone_info with status = " + _status);
  };

  acni.on_configured = function (module_id, app_session_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.on_configured",
      "m_origin": module_id,
      "m_target": 0,
      "app_session_id": app_session_id
    });
  };

  acni.disable_adcolony = function (module_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.disable",
      "m_origin": module_id,
      "m_target": 0
    });
  };
  acni.get = function (module_id, url, no_redirect, no_cellular, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "WebServices.get",
      "m_origin": module_id,
      "m_target": 0,
      "url": url,
      "no_redirect": no_redirect,
      "no_cellular": no_cellular
    }, reply_handler);
  };
  acni.post = function (module_id, url, content_type, content, no_redirect, no_cellular, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "WebServices.post",
      "m_origin": module_id,
      "m_target": 0,
      "url": url,
      "content_type": content_type,
      "content": content,
      "no_redirect": no_redirect,
      "no_cellular": no_cellular
    }, reply_handler);
  };

  acni.prepare_dec = function (module_id, mraid_filepath, dec_filepath, metadata, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "WebView.prepare",
      "m_origin": module_id,
      "m_target": 0,
      "mraid": mraid_filepath,
      "filepath": dec_filepath,
      "metadata": metadata
    }, reply_handler);
  };
  acni.load_module = function (module_id, ad_session_id, id, info, is_webview, use_uiwebview, is_display_module, data, filepath, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Module.load",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": id,
      "info": info,
      "is_webview": is_webview,
      "use_uiwebview": use_uiwebview,
      "is_display_module": is_display_module,
      "data": data,
      "filepath": filepath
    }, reply_handler);
  };

  acni.unload_module = function (module_id, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Module.unload",
      "m_origin": module_id,
      "m_target": 0,
      "id": module_id
    }, reply_handler);
  };

  acni.create_ad_container = function (module_id, ad_session_id, fullscreen, width, height, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdContainer.create",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": fullscreen,
      "module_id": module_id,
      "fullscreen_orientation": fullscreen,
      "width": width,
      "height": height
    }, reply_handler);
  };

  acni.destroy_ad_container = function (module_id, ad_session_id, fullscreen) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdContainer.destroy",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": fullscreen
    });
  };

  acni.move_view_to_front = function (module_id, ad_session_id, fullscreen, view_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdContainer.move_view_to_front",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": fullscreen,
      "view_id": view_id
    });
  };

  acni.move_view_to_index = function (module_id, ad_session_id, fullscreen, view_id, index) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdContainer.move_view_to_index",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": fullscreen,
      "view_id": view_id,
      "index": index
    });
  };

  acni.start_fullscreen_ad = function (module_id, ad_session_id, orientation) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.start_fullscreen_ad",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id,
      "orientation": orientation,
      "module_id": module_id
    });
  };

  acni.finish_fullscreen_ad = function (module_id, ad_session_id, _status, fullscreen) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.finish_fullscreen_ad",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id,
      "status": _status,
      "container_id": fullscreen
    });
  };

  acni.interstitial_available = function (module_id, ad_session_id, iap_enabled) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.interstitial_available",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id,
      "iap_enabled": iap_enabled
    });
  };

  acni.interstitial_unavailable = function (module_id, ad_session_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.interstitial_unavailable",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id
    });
  };

  acni.native_ad_view_available = function (module_id, ad_session_id, iap_enabled) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.native_ad_view_available",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id,
      "iap_enabled": enabled
    });
  };

  acni.native_ad_view_unavailable = function (module_id, ad_session_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.native_ad_view_unavailable",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id
    });
  };

  acni.destroy_ad_session = function (module_id, ad_session_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdSession.destroy",
      "m_origin": module_id,
      "m_target": 0,
      "id": ad_session_id
    });
  };

  acni.create_view = function (type, module_id, ad_session_id, container_id, view_id, x, y, w, h, custom_data) {
    var message_dict = {
      "m_type": type + ".create",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id,
      "x": x,
      "y": y,
      "width": w,
      "height": h
    };

    message_dict = merge_dicts(message_dict, custom_data);
    $.message_dispatcher.queue_outbound_message(message_dict);
  };

  acni.set_view_visibility = function (type, module_id, ad_session_id, container_id, view_id, visible) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": type + ".set_visible",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id,
      "visible": visible
    });
  };

  acni.set_view_bounds = function (type, module_id, ad_session_id, container_id, view_id, x, y, w, h) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": type + ".set_bounds",
      "m_origin": module_id,
      "m_target": 0,
      "id": view_id,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "x": x,
      "y": y,
      "width": w,
      "height": h
    });
  };

  acni.destroy_view = function (type, module_id, ad_session_id, container_id, view_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": type + ".destroy",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id
    });
  };
  acni.create_video_view = function (module_id, ad_session_id, container_id, view_id, x, y, w, h, vw, vh, timer, video_path, haptic_filepath) {
    var custom_data = {
      "video_width": vw,
      "video_height": vh,
      "enable_timer": timer,
      "filepath": video_path,
      "haptic_filepath": haptic_filepath
    };

    acni.create_view("VideoView", module_id, ad_session_id, container_id, view_id, x, y, w, h, custom_data);
  };

  acni.play_video = function (view_id, module_id, ad_session_id, container_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "VideoView.play",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id
    });
  };

  acni.pause_video = function (view_id, module_id, ad_session_id, container_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "VideoView.pause",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id
    });
  };
  acni.seek_video_to_time = function (view_id, module_id, ad_session_id, container_id, time, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "VideoView.seek_to_time",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": view_id,
      "time": time
    }, reply_handler);
  };
  acni.create_web_view = function (module_id, ad_session_id, container_id, id, x, y, w, h, data, is_module, info, base_url, enable_messages, use_uiwebview, reply_handler) {
    var custom_data = {
      "data": data,
      "is_module": is_module,
      "info": { "ad_session_id": ad_session_id },
      "base_url": base_url,
      "enable_messages": enable_messages,
      "use_uiwebview": use_uiwebview
    };

    acni.create_view("WebView", module_id, ad_session_id, container_id, x, y, w, h, custom_data, reply_handler);
  };

  acni.execute_js = function (module_id, ad_session_id, container_id, web_view_id, custom_js) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "WebView.execute_js",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "id": web_view_id,
      "custom_js": custom_js
    });
  };

  acni.create_image_view = function (module_id, ad_session_id, container_id, id, x, y, w, h, filepath) {
    var custom_data = {
      "filepath": filepath
    };

    acni.create_view("ImageView", module_id, ad_session_id, container_id, x, y, w, h, custom_data);
  };

  acni.set_image_view_image = function (module_id, ad_session_id, container_id, image_view_id, filepath) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "ImageView.set_image",
      "m_origin": module_id,
      "m_target": 0,
      "container_id": container_id,
      "ad_session_id": ad_session_id,
      "id": image_view_id,
      "filepath": filepath
    });
  };

  acni.create_audio_player = function (module_id, ad_session_id, player_id, filepath, repeats, use_sound_pool) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AudioPlayer.create",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": player_id,
      "filepath": filepath,
      "repeats": repeats,
      "use_sound_pool": use_sound_pool
    });
  };

  acni.play_audio_player = function (module_id, ad_session_id, player_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AudioPlayer.play",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": player_id
    });
  };

  acni.pause_audio_player = function (module_id, ad_session_id, player_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AudioPlayer.pause",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": player_id
    });
  };

  acni.stop_audio_player = function (module_id, ad_session_id, player_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AudioPlayer.stop",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": player_id
    });
  };

  acni.destroy_audio_player = function (module_id, ad_session_id, player_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AudioPlayer.destroy",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "id": player_id
    });
  };

  acni.show_alert = function (module_id, ad_session_id, container_id, message, title, positive_action, negative_action, on_resume, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Alert.show",
      "m_origin": module_id,
      "m_target": 0,
      "ad_session_id": ad_session_id,
      "container_id": container_id,
      "message": message,
      "title": title,
      "positive": positive_action,
      "negative": negative_action,
      "on_resume": on_resume
    }, reply_handler);
  };

  acni.crc32 = function (module_id, data, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Crypto.uuid",
      "m_origin": module_id,
      "m_target": 0,
      "data": data
    }, reply_handler);
  };

  acni.sha1 = function (module_id, data, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Crypto.uuid",
      "m_origin": module_id,
      "m_target": 0,
      "data": data
    }, reply_handler);
  };

  acni.uuid = function (module_id, number, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Crypto.uuid",
      "m_origin": module_id,
      "m_target": 0,
      "number": number
    }, reply_handler);
  };
  acni.get_device_info = function (module_id, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Device.get_info",
      "m_origin": module_id,
      "m_target": 0
    }, reply_handler);
  };

  acni.update_device_info = function (module_id, info) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Device.get_info",
      "m_origin": module_id,
      "m_target": 0,
      "info": info
    });
  };

  acni.query_advertiser_info = function (reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "Device.query_advertiser_info",
      "m_origin": 1,
      "m_target": 0
    }, reply_handler);
  };
  acni.file_exists = function (module_id, filepath, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.exists",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath
    }, reply_handler);
  };
  acni.load_file = function (module_id, filepath, decrypt, calculate_crc32, encoding, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.load",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath,
      "decrypt": decrypt,
      "calculate_crc32": calculate_crc32,
      "encoding": encoding
    }, reply_handler);
  };

  acni.rename_file = function (module_id, filepath, new_filepath, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.rename",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath,
      "new_filepath": new_filepath
    }, reply_handler);
  };

  acni.save_file = function (module_id, filepath, data, encrypt, encoding, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.save",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath,
      "data": data,
      "encrypt": encrypt,
      "encoding": encoding
    }, reply_handler);
  };

  acni.delete_file = function (module_id, filepath, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.delete",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath
    }, reply_handler);
  };
  acni.extract_from_file = function (module_id, filepath, offset, size, output_filepath, gunzip, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.extract",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath,
      "offset": offset,
      "size": size,
      "output_filepath": output_filepath,
      "gunzip": gunzip
    }, reply_handler);
  };
  acni.directory_listing = function (module_id, filepath, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "FileSystem.listing",
      "m_origin": module_id,
      "m_target": 0,
      "filepath": filepath
    }, reply_handler);
  };
  acni.cache_media_file = function (module_id, url, reply_handler) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "MediaPool.cache",
      "m_origin": module_id,
      "m_target": 0,
      "url": url
    }, reply_handler);
  };
  acni.send_custom_message = function (module_id, type, message) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "CustomMessage.controller_send",
      "m_origin": module_id,
      "m_target": 0,
      "type": type,
      "message": message
    });
  };

  acni.send_custom_message_reply = function (module_id, reply_id, obj) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "CustomMessage.controller_reply",
      "m_origin": module_id,
      "m_target": 0,
      "id": reply_id,
      "obj": obj
    });
  };

  acni.prepare_browser = function (module_id, config) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "System.prepare_browser",
      "m_origin": module_id,
      "m_target": 0,
      "config": config
    });
  };

  acni.on_ad_unit_event = function (type, module_id, ad_session_id, custom_data) {
    var message_dict = {
      "m_type": type,
      "m_origin": module_id,
      "m_target": 1,
      "ad_session_id": ad_session_id
    };

    message_dict = merge_dicts(message_dict, custom_data);
    $.message_dispatcher.queue_outbound_message(message_dict);
  };

  acni.send_controller_version = function (module_id, version) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdColony.controller_version",
      "m_origin": module_id,
      "m_target": 0,
      "version": version
    });
  };

  acni.ad_unit_on_expand = function (origin_module_id, target_module_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "AdUnit.expanded",
      "m_origin": origin_module_id,
      "m_target": target_module_id
    });
  };

  acni.mraid_on_replay = function (origin_module_id, target_module_id) {
    $.message_dispatcher.queue_outbound_message({
      "m_type": "MRAID.on_replay",
      "m_origin": origin_module_id,
      "m_target": target_module_id
    });
  };

  var merge_dicts = function merge_dicts(dict1, dict2) {
    var new_dict = {};

    for (var key in dict1) {
      new_dict[key] = dict1[key];
    }

    for (var key in dict2) {
      new_dict[key] = dict2[key];
    }

    return new_dict;
  };

  return acni;
})();

var ADCBootstrap = (function () {
  function ADCBootstrap() {
    _classCallCheck(this, ADCBootstrap);
  }

  ADCBootstrap.prototype.start = function start() {
    var _this37 = this;

    var version = "" + 1 + "." + 0 + "." + 3 + "." + 6;
    acni.send_controller_version(1, version);

    $.device.request_info(function () {
      log_info("Detecting device info received. Requesting media pool listing");

      acni.file_exists(1, $.device.get_data_path() + "media", function (reply) {
        var exists = lookup_boolean(reply, "result");
        if (!exists) {
          log_info("Detecting media file does not already exist.");
          _this37.on_media_pool_info_received([]);
          return;
        }

        log_info("Detecting that media file already exists. Parsing now");
        acni.load_file(1, $.device.get_data_path() + "media", undefined, undefined, undefined, function (reply) {
          var success = lookup_boolean(reply, "success");
          if (!success) {
            return;
          }

          var data = lookup(reply, "data");
          var parsed_json = parse_json_with_check(data);
          if (parsed_json !== false) {
            _this37.on_media_pool_info_received(parsed_json);
          } else {
            _this37.on_media_pool_info_received([]);
          }
        });
      });

      $.network_manager = new ADCNetworkManager();
    });
  };

  ADCBootstrap.prototype.on_media_pool_info_received = function on_media_pool_info_received(listing) {
    var _this38 = this;

    log_info("Detecting media pool listing received. Requesting app info");
    log_trace("Media pool listing: " + JSON.stringify(listing));

    $.asset_manager = new ADCAssetManager(listing);
    if ($.asset_manager.file_exists("https://s3.amazonaws.com/adc3/MRAID/MRAID.js")) {
      this.on_mraid_present();
      return;
    }

    log_info("Trying to load a cached app config");
    var filepath = $.device.get_data_path() + "config.json";
    var parsed_data = "";

    log_info("Detecting that MRAID source file is not present. Downloading now");
    acni.uuid(1, 1, function (reply) {
      var uuids = lookup_array(reply, "uuids");
      if (uuids.length === 0) {
        return;
      }

      var uuid = uuids[0];
      var mraid_filepath = $.device.get_data_path() + uuid;
      acni.download(1, "https://s3.amazonaws.com/adc3/MRAID/MRAID.js", uuid, mraid_filepath, undefined, undefined, undefined, function (url) {
        log_info("owain: download complete");
        $.app.set_has_mraid(true);
        _this38.on_mraid_present();
      });
    });
  };

  ADCBootstrap.prototype.on_mraid_present = function on_mraid_present() {
    var _this39 = this;

    $.app.set_has_mraid(true);

    $.app.request_app_info(function (app_info) {
      var filepath = $.device.get_data_path() + "config.json";

      acni.file_exists(1, filepath, function (reply) {
        var exists = lookup_boolean(reply, "result");
        if (!exists) {
          log_info("Cached app config does not exist");
          $.app.configure(app_info, "");
        }

        log_info("Cached app config exists, loading data");
        acni.load_file(1, filepath, undefined, undefined, undefined, function (reply) {
          var data = lookup(reply, "data");
          log_trace("Loaded cached app config: " + data);

          parsed_data = parse_json_with_check(data);
          var success = _this39.validate_zone_ids(app_info, parsed_data);
          log_trace("Zone id validation success: " + success);
          if (success) {
            $.app._parse(parsed_data, lookup_array(app_info, "zones"), true);
            $.app.configure(app_info, parsed_data);
            return;
          }

          log_info("Deleting old config. Zone ids have changed");

          $.asset_manager.set_all_removable();

          acni.delete_file(1, filepath, function (reply) {
            var deleted = lookup_boolean(reply, "success");
            $.app.configure(app_info, "");
          });
        });
      });
    });
  };

  ADCBootstrap.prototype.validate_zone_ids = function validate_zone_ids(native_info, stored_info) {
    var native_zone_ids = lookup_array(native_info, "zones");
    var stored_zone_ids = [];
    var stored_zones = lookup_array(lookup(stored_info, "app"), "zones");
    var keys = Object.keys(stored_zones);
    for (var key in keys) {
      var zone = lookup(stored_zones, key);
      var zone_id = lookup_string(zone, "uuid");
      stored_zone_ids.push(zone_id);
    }

    if (native_zone_ids.length !== stored_zone_ids.length) {
      return false;
    }

    for (var i = 0; i < native_zone_ids.length; ++i) {
      if (stored_zone_ids.indexOf(native_zone_ids[i]) === -1) {
        return false;
      }
    }

    return true;
  };

  return ADCBootstrap;
})();

var $ = {
  enabled: true,
  message_dispatcher: null,
  log: null,
  bootstrap: null,
  app: null,
  device: null,
  asset_manager: null,
  interval_id: 0
};
var ADC3_init = function ADC3_init(module_id, info) {
  $.enabled = true;
  $.message_dispatcher = new ADCControllerMessageDispatcher();
  $.log = new ADCLogger($.message_dispatcher);
  $.device = new ADCDevice();

  acni.uuid(1, 1, function (reply) {
    var uuids = lookup_array(reply, "uuids");
    $.app = new ADCApp(uuids[0]);
    $.app.set_user_metadata(lookup_default(info, "user_metadata", {}));
    $.bootstrap = new ADCBootstrap();
    $.bootstrap.start();
  });
};

var ADC3_update = function ADC3_update(inbound_messages) {
  if (typeof inbound_messages == "string") {
    inbound_messages = JSON.parse(inbound_messages);
  }

  if ($.app !== null) {
    $.app.update();
  }

  $.message_dispatcher.distribute(inbound_messages);
  var outbound = $.message_dispatcher["package"]();
  return outbound;
};
